[debug] [2021-05-23T12:38:52.809Z] ----------------------------------------------------------------------
[debug] [2021-05-23T12:38:52.811Z] Command:       /Users/yohanjhaveri/.nvm/versions/node/v15.12.0/bin/node /usr/local/bin/firebase emulators:start
[debug] [2021-05-23T12:38:52.811Z] CLI Version:   9.2.1
[debug] [2021-05-23T12:38:52.811Z] Platform:      darwin
[debug] [2021-05-23T12:38:52.811Z] Node Version:  v15.12.0
[debug] [2021-05-23T12:38:52.813Z] Time:          Sun May 23 2021 08:38:52 GMT-0400 (Eastern Daylight Time)
[debug] [2021-05-23T12:38:52.813Z] ----------------------------------------------------------------------
[debug] [2021-05-23T12:38:52.813Z] 
[debug] [2021-05-23T12:38:52.822Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2021-05-23T12:38:52.823Z] > authorizing via signed-in user
[info] i  emulators: Starting emulators: auth, functions, firestore, hosting, pubsub {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: auth, functions, firestore, hosting, pubsub"}}
[debug] [2021-05-23T12:38:52.837Z] [hub] writing locator at /var/folders/0f/xr424s755n11sr1w5pgfrpjw0000gn/T/hub-studyfind-researcher.json
[warn] ⚠  functions: The following emulators are not running, calls to these services from the Functions emulator will affect production: database {"metadata":{"emulator":{"name":"functions"},"message":"The following emulators are not running, calls to these services from the Functions emulator will affect production: \u001b[1mdatabase\u001b[22m"}}
[warn] ⚠  Your requested "node" version "12" doesn't match your global version "15" {"metadata":{"emulator":{"name":"functions"},"message":"Your requested \"node\" version \"12\" doesn't match your global version \"15\""}}
[debug] [2021-05-23T12:38:52.863Z] defaultcredentials: writing to file /Users/yohanjhaveri/.config/firebase/yohanjhaveri_gmail_com_application_default_credentials.json
[debug] [2021-05-23T12:38:52.868Z] Setting GAC to /Users/yohanjhaveri/.config/firebase/yohanjhaveri_gmail_com_application_default_credentials.json {"metadata":{"emulator":{"name":"functions"},"message":"Setting GAC to /Users/yohanjhaveri/.config/firebase/yohanjhaveri_gmail_com_application_default_credentials.json"}}
[debug] [2021-05-23T12:38:52.872Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/studyfind-researcher/adminSdkConfig [none]
[debug] [2021-05-23T12:38:53.217Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/studyfind-researcher/adminSdkConfig 200
[debug] [2021-05-23T12:38:53.218Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/studyfind-researcher/adminSdkConfig {"projectId":"studyfind-researcher","databaseURL":"https://studyfind-researcher.firebaseio.com","storageBucket":"studyfind-researcher.appspot.com","locationId":"us-central"}
[debug] [2021-05-23T12:38:53.256Z] Ignoring unsupported arg: projectId {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: projectId"}}
[debug] [2021-05-23T12:38:53.257Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2021-05-23T12:38:53.257Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/Users/yohanjhaveri/.cache/firebase/emulators/cloud-firestore-emulator-v1.11.12.jar","--host","localhost","--port",8080,"--rules","/Users/yohanjhaveri/Code/studyfind-manage/firestore.rules","--functions_emulator","localhost:5001"],"optionalArgs":["port","webchannel_port","host","rules","functions_emulator","seed_from_export"],"joinArgs":false} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/Users/yohanjhaveri/.cache/firebase/emulators/cloud-firestore-emulator-v1.11.12.jar\",\"--host\",\"localhost\",\"--port\",8080,\"--rules\",\"/Users/yohanjhaveri/Code/studyfind-manage/firestore.rules\",\"--functions_emulator\",\"localhost:5001\"],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"functions_emulator\",\"seed_from_export\"],\"joinArgs\":false}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to \u001b[1mfirestore-debug.log\u001b[22m"}}
[debug] [2021-05-23T12:38:54.961Z] API endpoint: http:// {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://"}}
[debug] [2021-05-23T12:38:54.962Z] localhost:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=localhost {"metadata":{"emulator":{"name":"firestore"},"message":"localhost:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=localhost"}}
[debug] [2021-05-23T12:38:54.963Z] : {"metadata":{"emulator":{"name":"firestore"},"message":":"}}
[debug] [2021-05-23T12:38:54.963Z] 8080

 {"metadata":{"emulator":{"name":"firestore"},"message":"8080\n\n"}}
[debug] [2021-05-23T12:38:54.964Z] Dev App Server is now running.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Dev App Server is now running.\n"}}
[debug] [2021-05-23T12:38:54.966Z] 
 {"metadata":{"emulator":{"name":"firestore"},"message":"\n"}}
[debug] [2021-05-23T12:38:59.006Z] Ignoring unsupported arg: projectId {"metadata":{"emulator":{"name":"pubsub"},"message":"Ignoring unsupported arg: projectId"}}
[debug] [2021-05-23T12:38:59.006Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"pubsub"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2021-05-23T12:38:59.006Z] Starting Pub/Sub Emulator with command {"binary":"/Users/yohanjhaveri/.cache/firebase/emulators/pubsub-emulator-0.1.0/pubsub-emulator/bin/cloud-pubsub-emulator","args":["--host=localhost","--port=8085"],"optionalArgs":["port","host"],"joinArgs":true} {"metadata":{"emulator":{"name":"pubsub"},"message":"Starting Pub/Sub Emulator with command {\"binary\":\"/Users/yohanjhaveri/.cache/firebase/emulators/pubsub-emulator-0.1.0/pubsub-emulator/bin/cloud-pubsub-emulator\",\"args\":[\"--host=localhost\",\"--port=8085\"],\"optionalArgs\":[\"port\",\"host\"],\"joinArgs\":true}"}}
[info] i  pubsub: Pub/Sub Emulator logging to pubsub-debug.log {"metadata":{"emulator":{"name":"pubsub"},"message":"Pub/Sub Emulator logging to \u001b[1mpubsub-debug.log\u001b[22m"}}
[debug] [2021-05-23T12:38:59.197Z] This is the Google Pub/Sub fake.
Implementation may be incomplete or differ from the real system.
 {"metadata":{"emulator":{"name":"pubsub"},"message":"This is the Google Pub/Sub fake.\nImplementation may be incomplete or differ from the real system.\n"}}
[debug] [2021-05-23T12:38:59.228Z] May 23, 2021 8:38:59 AM com.google.cloud.pubsub.testing.v1.Main main
INFO: IAM integration is disabled. IAM policy methods and ACL checks are not supported
 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 8:38:59 AM com.google.cloud.pubsub.testing.v1.Main main\nINFO: IAM integration is disabled. IAM policy methods and ACL checks are not supported\n"}}
[debug] [2021-05-23T12:38:59.774Z] May 23, 2021 8:38:59 AM io.gapi.emulators.netty.NettyUtil applyJava7LongHostnameWorkaround
INFO: Unable to apply Java 7 long hostname workaround.
 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 8:38:59 AM io.gapi.emulators.netty.NettyUtil applyJava7LongHostnameWorkaround\nINFO: Unable to apply Java 7 long hostname workaround.\n"}}
[debug] [2021-05-23T12:38:59.963Z] May 23, 2021 8:38:59 AM com.google.cloud.pubsub.testing.v1.Main main
INFO: Server started, listening on 8085
 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 8:38:59 AM com.google.cloud.pubsub.testing.v1.Main main\nINFO: Server started, listening on 8085\n"}}
[debug] [2021-05-23T12:39:00.064Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/studyfind-researcher/webApps/-/config [none]
[debug] [2021-05-23T12:39:00.209Z] May 23, 2021 8:39:00 AM io.gapi.emulators.grpc.GrpcServer$3 operationComplete
INFO: Adding handler(s) to newly registered Channel.
 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 8:39:00 AM io.gapi.emulators.grpc.GrpcServer$3 operationComplete\nINFO: Adding handler(s) to newly registered Channel.\n"}}
[debug] [2021-05-23T12:39:00.478Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/studyfind-researcher/webApps/-/config 200
[debug] [2021-05-23T12:39:00.479Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/studyfind-researcher/webApps/-/config {"projectId":"studyfind-researcher","databaseURL":"https://studyfind-researcher.firebaseio.com","storageBucket":"studyfind-researcher.appspot.com","locationId":"us-central","apiKey":"AIzaSyB0_PyqZxFZm8t0jY3PAFyP8oMxFalCYGA","authDomain":"studyfind-researcher.firebaseapp.com","messagingSenderId":"434311866185"}
[info] i  hosting[studyfind-manage]: Serving hosting files from: build {"metadata":{"emulator":{"name":"hosting"},"message":"Serving hosting files from: \u001b[1mbuild\u001b[22m"}}
[info] ✔  hosting[studyfind-manage]: Local server: http://localhost:5000 {"metadata":{"emulator":{"name":"hosting"},"message":"Local server: \u001b[4m\u001b[1mhttp://localhost:5000\u001b[22m\u001b[24m"}}
[debug] [2021-05-23T12:39:00.771Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"ui"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2021-05-23T12:39:00.772Z] Ignoring unsupported arg: port {"metadata":{"emulator":{"name":"ui"},"message":"Ignoring unsupported arg: port"}}
[debug] [2021-05-23T12:39:00.772Z] Starting Emulator UI with command {"binary":"node","args":["/Users/yohanjhaveri/.cache/firebase/emulators/ui-v1.4.1/server.bundle.js"],"optionalArgs":[],"joinArgs":false} {"metadata":{"emulator":{"name":"ui"},"message":"Starting Emulator UI with command {\"binary\":\"node\",\"args\":[\"/Users/yohanjhaveri/.cache/firebase/emulators/ui-v1.4.1/server.bundle.js\"],\"optionalArgs\":[],\"joinArgs\":false}"}}
[info] i  ui: Emulator UI logging to ui-debug.log {"metadata":{"emulator":{"name":"ui"},"message":"Emulator UI logging to \u001b[1mui-debug.log\u001b[22m"}}
[debug] [2021-05-23T12:39:00.903Z] Web / API server started at http://localhost:4000
 {"metadata":{"emulator":{"name":"ui"},"message":"Web / API server started at http://localhost:4000\n"}}
[info] i  functions: Watching "/Users/yohanjhaveri/Code/studyfind-manage/functions" for Cloud Functions... {"metadata":{"emulator":{"name":"functions"},"message":"Watching \"/Users/yohanjhaveri/Code/studyfind-manage/functions\" for Cloud Functions..."}}
[debug] [2021-05-23T12:39:01.050Z] [worker-pool] addWorker(~diagnostic~) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] addWorker(~diagnostic~)"}}
[debug] [2021-05-23T12:39:01.051Z] [worker-pool] Adding worker with key ~diagnostic~, total=1 {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Adding worker with key ~diagnostic~, total=1"}}
[debug] [2021-05-23T12:39:01.051Z] [worker-pool] submitWork(triggerId=) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitWork(triggerId=)"}}
[debug] [2021-05-23T12:39:01.052Z] [worker-~diagnostic~-24617fe4-b52e-4dc4-811a-828189a5bf2a]: Assigning socketPath: /var/folders/0f/xr424s755n11sr1w5pgfrpjw0000gn/T/fire_emu_93833.sock {"metadata":{"emulator":{"name":"functions"},"message":"[worker-~diagnostic~-24617fe4-b52e-4dc4-811a-828189a5bf2a]: Assigning socketPath: /var/folders/0f/xr424s755n11sr1w5pgfrpjw0000gn/T/fire_emu_93833.sock"}}
[debug] [2021-05-23T12:39:01.052Z] [worker-~diagnostic~-24617fe4-b52e-4dc4-811a-828189a5bf2a]: BUSY {"metadata":{"emulator":{"name":"functions"},"message":"[worker-~diagnostic~-24617fe4-b52e-4dc4-811a-828189a5bf2a]: BUSY"}}
[debug] [2021-05-23T12:39:01.459Z] [runtime-status] [93833] Functions runtime initialized. {"cwd":"/Users/yohanjhaveri/Code/studyfind-manage/functions","node_version":"15.12.0"} {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] Functions runtime initialized. {\"cwd\":\"/Users/yohanjhaveri/Code/studyfind-manage/functions\",\"node_version\":\"15.12.0\"}"}}
[debug] [2021-05-23T12:39:01.461Z] [runtime-status] [93833] Disabled runtime features: undefined {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] Disabled runtime features: undefined"}}
[debug] [2021-05-23T12:39:01.464Z] [runtime-status] [93833] Resolved module firebase-admin {"declared":true,"installed":true,"version":"9.4.1","resolution":"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-admin/lib/index.js"} {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] Resolved module firebase-admin {\"declared\":true,\"installed\":true,\"version\":\"9.4.1\",\"resolution\":\"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-admin/lib/index.js\"}"}}
[debug] [2021-05-23T12:39:01.466Z] [runtime-status] [93833] Resolved module firebase-functions {"declared":true,"installed":true,"version":"3.12.0","resolution":"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-functions/lib/index.js"} {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] Resolved module firebase-functions {\"declared\":true,\"installed\":true,\"version\":\"3.12.0\",\"resolution\":\"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-functions/lib/index.js\"}"}}
[debug] [2021-05-23T12:39:01.468Z] [runtime-status] [93833] Resolved module firebase-functions {"declared":true,"installed":true,"version":"3.12.0","resolution":"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-functions/lib/index.js"} {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] Resolved module firebase-functions {\"declared\":true,\"installed\":true,\"version\":\"3.12.0\",\"resolution\":\"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-functions/lib/index.js\"}"}}
[debug] [2021-05-23T12:39:01.468Z] [runtime-status] [93833] Set PUBSUB_EMULATOR_HOST to localhost:8085 {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] Set PUBSUB_EMULATOR_HOST to localhost:8085"}}
[debug] [2021-05-23T12:39:01.471Z] [runtime-status] [93833] Outgoing network have been stubbed. [{"name":"http","status":"mocked"},{"name":"http","status":"mocked"},{"name":"https","status":"mocked"},{"name":"https","status":"mocked"},{"name":"net","status":"mocked"}] {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] Outgoing network have been stubbed. [{\"name\":\"http\",\"status\":\"mocked\"},{\"name\":\"http\",\"status\":\"mocked\"},{\"name\":\"https\",\"status\":\"mocked\"},{\"name\":\"https\",\"status\":\"mocked\"},{\"name\":\"net\",\"status\":\"mocked\"}]"}}
[debug] [2021-05-23T12:39:01.473Z] [runtime-status] [93833] Resolved module firebase-functions {"declared":true,"installed":true,"version":"3.12.0","resolution":"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-functions/lib/index.js"} {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] Resolved module firebase-functions {\"declared\":true,\"installed\":true,\"version\":\"3.12.0\",\"resolution\":\"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-functions/lib/index.js\"}"}}
[debug] [2021-05-23T12:39:01.542Z] [runtime-status] [93833] Checked functions.config() {"config":{}} {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] Checked functions.config() {\"config\":{}}"}}
[debug] [2021-05-23T12:39:01.543Z] [runtime-status] [93833] firebase-functions has been stubbed. {"functionsResolution":{"declared":true,"installed":true,"version":"3.12.0","resolution":"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-functions/lib/index.js"}} {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] firebase-functions has been stubbed. {\"functionsResolution\":{\"declared\":true,\"installed\":true,\"version\":\"3.12.0\",\"resolution\":\"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-functions/lib/index.js\"}}"}}
[debug] [2021-05-23T12:39:01.543Z] [runtime-status] [93833] Resolved module firebase-functions {"declared":true,"installed":true,"version":"3.12.0","resolution":"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-functions/lib/index.js"} {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] Resolved module firebase-functions {\"declared\":true,\"installed\":true,\"version\":\"3.12.0\",\"resolution\":\"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-functions/lib/index.js\"}"}}
[debug] [2021-05-23T12:39:01.543Z] [runtime-status] [93833] Resolved module firebase-admin {"declared":true,"installed":true,"version":"9.4.1","resolution":"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-admin/lib/index.js"} {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] Resolved module firebase-admin {\"declared\":true,\"installed\":true,\"version\":\"9.4.1\",\"resolution\":\"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-admin/lib/index.js\"}"}}
[debug] [2021-05-23T12:39:01.543Z] [runtime-status] [93833] Resolved module firebase-functions {"declared":true,"installed":true,"version":"3.12.0","resolution":"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-functions/lib/index.js"} {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] Resolved module firebase-functions {\"declared\":true,\"installed\":true,\"version\":\"3.12.0\",\"resolution\":\"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-functions/lib/index.js\"}"}}
[debug] [2021-05-23T12:39:01.544Z] [runtime-status] [93833] firebase-admin has been stubbed. {"adminResolution":{"declared":true,"installed":true,"version":"9.4.1","resolution":"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-admin/lib/index.js"}} {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] firebase-admin has been stubbed. {\"adminResolution\":{\"declared\":true,\"installed\":true,\"version\":\"9.4.1\",\"resolution\":\"/Users/yohanjhaveri/Code/studyfind-manage/functions/node_modules/firebase-admin/lib/index.js\"}}"}}
[debug] [2021-05-23T12:39:01.546Z] [runtime-status] [93833] initializeApp(DEFAULT) {"storageBucket":"studyfind-researcher.appspot.com","databaseURL":"https://studyfind-researcher.firebaseio.com","projectId":"studyfind-researcher"} {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] initializeApp(DEFAULT) {\"storageBucket\":\"studyfind-researcher.appspot.com\",\"databaseURL\":\"https://studyfind-researcher.firebaseio.com\",\"projectId\":\"studyfind-researcher\"}"}}
[debug] [2021-05-23T12:39:01.602Z] [runtime-status] [93833] auth.setJwtVerificationEnabled(false) {"metadata":{"emulator":{"name":"functions"},"message":"[runtime-status] [93833] auth.setJwtVerificationEnabled(false)"}}
[info] ✔  functions[setResearcherClaim]: http function initialized (http://localhost:5001/studyfind-researcher/us-central1/setResearcherClaim). {"metadata":{"emulator":{"name":"functions"},"message":"\u001b[1mhttp\u001b[22m function initialized (http://localhost:5001/studyfind-researcher/us-central1/setResearcherClaim)."}}
[info] ✔  functions[setParticipantClaim]: http function initialized (http://localhost:5001/studyfind-researcher/us-central1/setParticipantClaim). {"metadata":{"emulator":{"name":"functions"},"message":"\u001b[1mhttp\u001b[22m function initialized (http://localhost:5001/studyfind-researcher/us-central1/setParticipantClaim)."}}
[info] ✔  functions[createStudy]: http function initialized (http://localhost:5001/studyfind-researcher/us-central1/createStudy). {"metadata":{"emulator":{"name":"functions"},"message":"\u001b[1mhttp\u001b[22m function initialized (http://localhost:5001/studyfind-researcher/us-central1/createStudy)."}}
[info] ✔  functions[updateStudy]: http function initialized (http://localhost:5001/studyfind-researcher/us-central1/updateStudy). {"metadata":{"emulator":{"name":"functions"},"message":"\u001b[1mhttp\u001b[22m function initialized (http://localhost:5001/studyfind-researcher/us-central1/updateStudy)."}}
[info] ✔  functions[welcomeAccount]: http function initialized (http://localhost:5001/studyfind-researcher/us-central1/welcomeAccount). {"metadata":{"emulator":{"name":"functions"},"message":"\u001b[1mhttp\u001b[22m function initialized (http://localhost:5001/studyfind-researcher/us-central1/welcomeAccount)."}}
[debug] [2021-05-23T12:39:02.096Z] addFirestoreTrigger "{\"eventTrigger\":{\"resource\":\"projects/studyfind-researcher/databases/(default)/documents/researchers/{researcherID}\",\"eventType\":\"providers/cloud.firestore/eventTypes/document.create\",\"service\":\"firestore.googleapis.com\"}}"
[debug] [2021-05-23T12:39:02.097Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher/triggers/onCreateAccount-0  
 {"eventTrigger":{"resource":"projects/studyfind-researcher/databases/(default)/documents/researchers/{researcherID}","eventType":"providers/cloud.firestore/eventTypes/document.create","service":"firestore.googleapis.com"}}
[debug] [2021-05-23T12:39:02.101Z] [worker-~diagnostic~-24617fe4-b52e-4dc4-811a-828189a5bf2a]: IDLE {"metadata":{"emulator":{"name":"functions"},"message":"[worker-~diagnostic~-24617fe4-b52e-4dc4-811a-828189a5bf2a]: IDLE"}}
[debug] [2021-05-23T12:39:02.127Z] May 23, 2021 8:39:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:39:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T12:39:02.314Z] May 23, 2021 8:39:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:39:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-05-23T12:39:03.032Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"4"}
[info] ✔  functions[onCreateAccount]: firestore function initialized. {"metadata":{"emulator":{"name":"functions"},"message":"\u001b[1mfirestore\u001b[22m function initialized."}}
[debug] [2021-05-23T12:39:03.033Z] addFirestoreTrigger "{\"eventTrigger\":{\"resource\":\"projects/studyfind-researcher/databases/(default)/documents/studies/{studyID}\",\"eventType\":\"providers/cloud.firestore/eventTypes/document.create\",\"service\":\"firestore.googleapis.com\"}}"
[debug] [2021-05-23T12:39:03.034Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher/triggers/onCreateStudy-0  
 {"eventTrigger":{"resource":"projects/studyfind-researcher/databases/(default)/documents/studies/{studyID}","eventType":"providers/cloud.firestore/eventTypes/document.create","service":"firestore.googleapis.com"}}
[debug] [2021-05-23T12:39:03.041Z] May 23, 2021 8:39:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:39:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T12:39:03.074Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"4"}
[info] ✔  functions[onCreateStudy]: firestore function initialized. {"metadata":{"emulator":{"name":"functions"},"message":"\u001b[1mfirestore\u001b[22m function initialized."}}
[debug] [2021-05-23T12:39:03.075Z] addFirestoreTrigger "{\"eventTrigger\":{\"resource\":\"projects/studyfind-researcher/databases/(default)/documents/studies/{studyID}\",\"eventType\":\"providers/cloud.firestore/eventTypes/document.delete\",\"service\":\"firestore.googleapis.com\"}}"
[debug] [2021-05-23T12:39:03.075Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher/triggers/onDeleteStudy-0  
 {"eventTrigger":{"resource":"projects/studyfind-researcher/databases/(default)/documents/studies/{studyID}","eventType":"providers/cloud.firestore/eventTypes/document.delete","service":"firestore.googleapis.com"}}
[debug] [2021-05-23T12:39:03.079Z] May 23, 2021 8:39:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:39:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T12:39:03.094Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"4"}
[info] ✔  functions[onDeleteStudy]: firestore function initialized. {"metadata":{"emulator":{"name":"functions"},"message":"\u001b[1mfirestore\u001b[22m function initialized."}}
[debug] [2021-05-23T12:39:03.095Z] addFirestoreTrigger "{\"eventTrigger\":{\"resource\":\"projects/studyfind-researcher/databases/(default)/documents/studies/{studyID}/participants/{participantID}\",\"eventType\":\"providers/cloud.firestore/eventTypes/document.create\",\"service\":\"firestore.googleapis.com\"}}"
[debug] [2021-05-23T12:39:03.095Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher/triggers/onNewParticipant-0  
 {"eventTrigger":{"resource":"projects/studyfind-researcher/databases/(default)/documents/studies/{studyID}/participants/{participantID}","eventType":"providers/cloud.firestore/eventTypes/document.create","service":"firestore.googleapis.com"}}
[debug] [2021-05-23T12:39:03.100Z] May 23, 2021 8:39:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:39:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T12:39:03.111Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"4"}
[info] ✔  functions[onNewParticipant]: firestore function initialized. {"metadata":{"emulator":{"name":"functions"},"message":"\u001b[1mfirestore\u001b[22m function initialized."}}
[debug] [2021-05-23T12:39:03.112Z] addPubsubTrigger {"eventTrigger":{"resource":"projects/studyfind-researcher/topics","eventType":"google.pubsub.topic.publish","service":"pubsub.googleapis.com"}}
[debug] [2021-05-23T12:39:03.112Z] [pubsub] addTrigger(firebase-schedule-remindersRunner, remindersRunner-0)
[debug] [2021-05-23T12:39:03.113Z] [pubsub] Creating topic: firebase-schedule-remindersRunner
[debug] [2021-05-23T12:39:03.248Z] May 23, 2021 8:39:03 AM io.gapi.emulators.grpc.GrpcServer$3 operationComplete
INFO: Adding handler(s) to newly registered Channel.
 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 8:39:03 AM io.gapi.emulators.grpc.GrpcServer$3 operationComplete\nINFO: Adding handler(s) to newly registered Channel.\n"}}
[debug] [2021-05-23T12:39:03.267Z] May 23, 2021 8:39:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 8:39:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-05-23T12:39:03.333Z] [pubsub] Creating sub for topic: firebase-schedule-remindersRunner
[info] ✔  functions[remindersRunner]: pubsub function initialized. {"metadata":{"emulator":{"name":"functions"},"message":"\u001b[1mpubsub\u001b[22m function initialized."}}
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://localhost:4000                │
└─────────────────────────────────────────────────────────────┘

┌────────────────┬────────────────┬─────────────────────────────────┐
│ Emulator       │ Host:Port      │ View in Emulator UI             │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Authentication │ localhost:9099 │ http://localhost:4000/auth      │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Functions      │ localhost:5001 │ http://localhost:4000/functions │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Firestore      │ localhost:8080 │ http://localhost:4000/firestore │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Hosting        │ localhost:5000 │ n/a                             │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Pub/Sub        │ localhost:8085 │ n/a                             │
└────────────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub running at localhost:4400
  Other reserved ports: 4500

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[debug] [2021-05-23T12:41:36.596Z] May 23, 2021 8:41:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:41:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T12:41:36.676Z] May 23, 2021 8:41:36 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
INFO: operation failed: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
com.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:105)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:65)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:58)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:503)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:172)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$11(FirestoreV1GrpcAdapter.java:190)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:67)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.access$000(FirestoreV1GrpcAdapter.java:39)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:190)
	at com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1239)
	at io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)
	at io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)
	at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
	at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:91)
	... 25 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:41:36 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nINFO: operation failed: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\ncom.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:105)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:65)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:58)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:503)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:172)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$11(FirestoreV1GrpcAdapter.java:190)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:67)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.access$000(FirestoreV1GrpcAdapter.java:39)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:190)\n\tat com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1239)\n\tat io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:91)\n\t... 25 more\n\n"}}
[debug] [2021-05-23T12:41:36.685Z] May 23, 2021 8:41:36 AM io.gapi.emulators.netty.HttpHandler$1 onError
INFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:41:36 AM io.gapi.emulators.netty.HttpHandler$1 onError\nINFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\n"}}
[debug] [2021-05-23T12:41:41.075Z] May 23, 2021 8:41:41 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
INFO: operation failed: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
com.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:105)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:65)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:58)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:503)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:172)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$11(FirestoreV1GrpcAdapter.java:190)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:67)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.access$000(FirestoreV1GrpcAdapter.java:39)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:190)
	at com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1239)
	at io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)
	at io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)
	at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
	at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:91)
	... 25 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:41:41 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nINFO: operation failed: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\ncom.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:105)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:65)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:58)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:503)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:172)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$11(FirestoreV1GrpcAdapter.java:190)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:67)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.access$000(FirestoreV1GrpcAdapter.java:39)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:190)\n\tat com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1239)\n\tat io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:91)\n\t... 25 more\n\n"}}
[debug] [2021-05-23T12:41:41.080Z] May 23, 2021 8:41:41 AM io.gapi.emulators.netty.HttpHandler$1 onError
INFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:41:41 AM io.gapi.emulators.netty.HttpHandler$1 onError\nINFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\n"}}
[debug] [2021-05-23T12:41:50.496Z] May 23, 2021 8:41:50 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
INFO: operation failed: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
com.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:105)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:65)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:58)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:503)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:172)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$11(FirestoreV1GrpcAdapter.java:190)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:67)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.access$000(FirestoreV1GrpcAdapter.java:39)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:190)
	at com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1239)
	at io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)
	at io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)
	at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
	at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:91)
	... 25 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:41:50 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nINFO: operation failed: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\ncom.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:105)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:65)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:58)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:503)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:172)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$11(FirestoreV1GrpcAdapter.java:190)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:67)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.access$000(FirestoreV1GrpcAdapter.java:39)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:190)\n\tat com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1239)\n\tat io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:91)\n\t... 25 more\n\n"}}
[debug] [2021-05-23T12:41:50.498Z] May 23, 2021 8:41:50 AM io.gapi.emulators.netty.HttpHandler$1 onError
INFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:41:50 AM io.gapi.emulators.netty.HttpHandler$1 onError\nINFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\n"}}
[debug] [2021-05-23T12:41:52.911Z] May 23, 2021 8:41:52 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
INFO: operation failed: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
com.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:105)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:65)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:58)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:503)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:172)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$11(FirestoreV1GrpcAdapter.java:190)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:67)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.access$000(FirestoreV1GrpcAdapter.java:39)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:190)
	at com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1239)
	at io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)
	at io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)
	at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
	at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:91)
	... 25 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:41:52 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nINFO: operation failed: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\ncom.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:105)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:65)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:58)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:503)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:172)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$11(FirestoreV1GrpcAdapter.java:190)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:67)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.access$000(FirestoreV1GrpcAdapter.java:39)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:190)\n\tat com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1239)\n\tat io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:91)\n\t... 25 more\n\n"}}
[debug] [2021-05-23T12:41:52.915Z] May 23, 2021 8:41:52 AM io.gapi.emulators.netty.HttpHandler$1 onError
INFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:41:52 AM io.gapi.emulators.netty.HttpHandler$1 onError\nINFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\n"}}
[debug] [2021-05-23T12:41:58.624Z] May 23, 2021 8:41:58 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError
INFO: operation failed: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
com.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:105)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:65)
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:58)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:503)
	at com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:172)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$11(FirestoreV1GrpcAdapter.java:190)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:67)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.access$000(FirestoreV1GrpcAdapter.java:39)
	at com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:190)
	at com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1239)
	at io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)
	at io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)
	at io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)
	at io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)
	at io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)
	at io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)
	at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
	at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException
	at com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:91)
	... 25 more

 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:41:58 AM com.google.cloud.datastore.emulator.impl.util.WrappedStreamObserver onError\nINFO: operation failed: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\ncom.google.cloud.datastore.core.exception.DatastoreException: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.asDatastoreException(EmulatorRulesCompiler.java:105)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.checkCompilationSucceeded(EmulatorRulesCompiler.java:65)\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$EmulatorCompilationResult.getAuthorizer(EmulatorRulesCompiler.java:58)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1.listCollectionIds(CloudFirestoreV1.java:503)\n\tat com.google.cloud.datastore.emulator.impl.CloudFirestoreV1Router.listCollectionIds(CloudFirestoreV1Router.java:172)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.lambda$listCollectionIds$11(FirestoreV1GrpcAdapter.java:190)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.unary(FirestoreV1GrpcAdapter.java:67)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter.access$000(FirestoreV1GrpcAdapter.java:39)\n\tat com.google.cloud.datastore.emulator.firestore.v1.FirestoreV1GrpcAdapter$1.listCollectionIds(FirestoreV1GrpcAdapter.java:190)\n\tat com.google.firestore.v1.FirestoreGrpc$MethodHandlers.invoke(FirestoreGrpc.java:1239)\n\tat io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:182)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.PartialForwardingServerCallListener.onHalfClose(PartialForwardingServerCallListener.java:35)\n\tat io.grpc.ForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:23)\n\tat io.grpc.ForwardingServerCallListener$SimpleForwardingServerCallListener.onHalfClose(ForwardingServerCallListener.java:40)\n\tat io.grpc.Contexts$ContextualizedServerCallListener.onHalfClose(Contexts.java:86)\n\tat io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.halfClosed(ServerCallImpl.java:331)\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1HalfClosed.runInContext(ServerImpl.java:797)\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: com.google.cloud.datastore.emulator.impl.rules.AutoValue_EmulatorRulesCompiler_CompilerException\n\tat com.google.cloud.datastore.emulator.impl.rules.EmulatorRulesCompiler$CompilerException.of(EmulatorRulesCompiler.java:91)\n\t... 25 more\n\n"}}
[debug] [2021-05-23T12:41:58.633Z] May 23, 2021 8:41:58 AM io.gapi.emulators.netty.HttpHandler$1 onError
INFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:
L9:5 Unexpected 'allow'.
L33:53 Unexpected ')'.
L161:3 Unexpected '}'.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:41:58 AM io.gapi.emulators.netty.HttpHandler$1 onError\nINFO: Exception when handling request: INVALID_ARGUMENT: Error compiling rules:\nL9:5 Unexpected 'allow'.\nL33:53 Unexpected ')'.\nL161:3 Unexpected '}'.\n"}}
[debug] [2021-05-23T12:54:03.452Z] May 23, 2021 8:54:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 5
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 8:54:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 5\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T12:54:03.456Z] May 23, 2021 8:54:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 7
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 8:54:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 7\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T12:54:03.479Z] Exception in thread "pool-1-thread-4" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-4\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T12:54:03.480Z] Exception in thread "pool-1-thread-5" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-5\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T12:54:03.481Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T12:54:03.490Z] Exception in thread "pool-1-thread-3" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-3\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T12:54:22.904Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n      && request.resource.data.name is string\n      && request.resource.data.name != \"\"\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", false) is bool\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", false) is bool\n      && request.resource.data.get(\"notifications.categories.account\", false) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", false) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", false) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", false) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T12:54:22.934Z] May 23, 2021 8:54:22 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 8:54:22 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T12:54:23.244Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1164"}
[warn] ⚠  firestore.rules:9:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:13:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:43:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:171:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:00:24.358Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n      && request.resource.data.name is string\n      && request.resource.data.name != \"\"\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", false) is bool\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", false) is bool\n      && request.resource.data.get(\"notifications.categories.account\", false) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", false) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", false) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", false) is bool\n\n      // should only update timezone if preferences.autodetectTimezone is set to true and the timezone is different\n      && request.resource.data.get(\"preferences.autodetectTimezone\", false) &&\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:00:24.382Z] May 23, 2021 9:00:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:00:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:00:24.624Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1164"}
[warn] ⚠  firestore.rules:9:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:13:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:50:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:181:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:00:39.508Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n      && request.resource.data.name is string\n      && request.resource.data.name != \"\"\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", false) is bool\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", false) is bool\n      && request.resource.data.get(\"notifications.categories.account\", false) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", false) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", false) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", false) is bool\n\n      // should only update timezone if preferences.autodetectTimezone is set to true and the timezone is different\n      && request.resource.data.get(\"preferences.autodetectTimezone\", false) && request.resource.data.timezone != resource.data.timezone\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:00:39.520Z] May 23, 2021 9:00:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:00:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:00:39.842Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1164"}
[warn] ⚠  firestore.rules:9:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:13:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:50:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:181:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:01:32.408Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n      && request.resource.data.name is string\n      && request.resource.data.name != \"\"\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", false) is bool\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", false) is bool\n      && request.resource.data.get(\"notifications.categories.account\", false) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", false) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", false) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", false) is bool\n\n      // should only update timezone if preferences.autodetectTimezone is set to true and the timezone is different\n      && (\n        request.resource.data.get(\"preferences.autodetectTimezone\", false) && request.resource.data.timezone != resource.data.timezone\n        || request.resource.data.get(\"preferences.autodetectTimezone\", false) && request.resource.data.timezone != resource.data.timezone\n      )\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:01:32.416Z] May 23, 2021 9:01:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:01:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:01:32.485Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1164"}
[warn] ⚠  firestore.rules:9:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:13:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:50:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:184:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:02:19.204Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n      && request.resource.data.name is string\n      && request.resource.data.name != \"\"\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", false) is bool\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", false) is bool\n      && request.resource.data.get(\"notifications.categories.account\", false) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", false) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", false) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", false) is bool\n\n      // should only update timezone if preferences.autodetectTimezone is set to true and the timezone is different\n      && (\n        (request.resource.data.get(\"preferences.autodetectTimezone\", false) && request.resource.data.timezone != resource.data.timezone)\n        || (request.resource.data.get(\"preferences.autodetectTimezone\", false) && request.resource.data.timezone != resource.data.timezone)\n      )\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:02:19.238Z] May 23, 2021 9:02:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:02:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:02:19.369Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1164"}
[warn] ⚠  firestore.rules:9:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:13:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:50:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:184:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:02:55.652Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n      && request.resource.data.name is string\n      && request.resource.data.name != \"\"\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", false) is bool\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", false) is bool\n      && request.resource.data.get(\"notifications.categories.account\", false) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", false) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", false) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", false) is bool\n\n      // should only update timezone if preferences.autodetectTimezone is set to true and the timezone is different\n      && (\n        (request.resource.data.get(\"preferences.autodetectTimezone\", false) == true && request.resource.data.timezone != resource.data.timezone)\n        || (request.resource.data.get(\"preferences.autodetectTimezone\", false) == false && request.resource.data.timezone == resource.data.timezone)\n      )\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:02:55.668Z] May 23, 2021 9:02:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:02:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:02:55.770Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1164"}
[warn] ⚠  firestore.rules:9:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:13:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:50:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:184:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:03:00.782Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n      && request.resource.data.name is string\n      && request.resource.data.name != \"\"\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", false) is bool\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", false) is bool\n      && request.resource.data.get(\"notifications.categories.account\", false) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", false) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", false) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", false) is bool\n\n      // should only update timezone if preferences.autodetectTimezone is set to true and the timezone is different\n      && (\n        (request.resource.data.get(\"preferences.autodetectTimezone\", false) == true && request.resource.data.timezone != resource.data.timezone)\n        ||\n        (request.resource.data.get(\"preferences.autodetectTimezone\", false) == false && request.resource.data.timezone == resource.data.timezone)\n      )\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:03:00.786Z] May 23, 2021 9:03:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:03:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:03:00.874Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1164"}
[warn] ⚠  firestore.rules:9:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:13:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:50:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:185:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:03:38.397Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n      && request.resource.data.name is string\n      && request.resource.data.name != \"\"\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", false) is bool\n      && request.resource.data.get(\"notifications.categories.account\", false) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", false) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", false) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", false) is bool\n\n      // should only update timezone if preferences.autodetectTimezone is set to true and the timezone is different\n      && (\n        (request.resource.data.get(\"preferences.autodetectTimezone\", true) == true && request.resource.data.timezone != resource.data.timezone)\n        ||\n        (request.resource.data.get(\"preferences.autodetectTimezone\", true) == false && request.resource.data.timezone == resource.data.timezone)\n      )\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:03:38.402Z] May 23, 2021 9:03:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:03:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:03:38.475Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1164"}
[warn] ⚠  firestore.rules:9:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:13:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:50:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:185:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:03:48.299Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n      && request.resource.data.name is string\n      && request.resource.data.name != \"\"\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      // should only update timezone if preferences.autodetectTimezone is set to true and the timezone is different\n      && (\n        (request.resource.data.get(\"preferences.autodetectTimezone\", true) == true && request.resource.data.timezone != resource.data.timezone)\n        ||\n        (request.resource.data.get(\"preferences.autodetectTimezone\", true) == false && request.resource.data.timezone == resource.data.timezone)\n      )\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:03:48.306Z] May 23, 2021 9:03:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:03:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:03:48.406Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1164"}
[warn] ⚠  firestore.rules:9:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:13:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:50:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:185:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:03:48.408Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n      && request.resource.data.name is string\n      && request.resource.data.name != \"\"\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      // should only update timezone if preferences.autodetectTimezone is set to true and the timezone is different\n      && (\n        (request.resource.data.get(\"preferences.autodetectTimezone\", true) == true && request.resource.data.timezone != resource.data.timezone)\n        ||\n        (request.resource.data.get(\"preferences.autodetectTimezone\", true) == false && request.resource.data.timezone == resource.data.timezone)\n      )\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:03:48.415Z] May 23, 2021 9:03:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:03:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:03:48.641Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1164"}
[warn] ⚠  firestore.rules:9:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:13:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:50:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:185:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T13:09:03.465Z] Exception in thread "pool-1-thread-9"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-9\" "}}
[debug] [2021-05-23T13:09:03.467Z] Exception in thread "pool-1-thread-7" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Exception in thread "pool-1-thread-10" Exception in thread "pool-1-thread-8" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Exception in thread "pool-1-thread-6" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-7\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nException in thread \"pool-1-thread-10\" Exception in thread \"pool-1-thread-8\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nio.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nio.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nException in thread \"pool-1-thread-6\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:11:39.730Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n      && request.resource.data.name is string\n      && request.resource.data.name != \"\"\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:11:39.791Z] May 23, 2021 9:11:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:11:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:11:40.053Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1164"}
[warn] ⚠  firestore.rules:9:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:13:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:50:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:178:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:14:44.396Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // timezone\n      && request.resource.data.name is string\n      && request.resource.data.name != \"\"\n      && request.resource.data.size() > 0\n      && request.resource.data.size() < 50\n\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field on so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:14:44.408Z] May 23, 2021 9:14:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:14:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:14:44.583Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1164"}
[warn] ⚠  firestore.rules:9:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:13:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:56:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:185:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:14:55.877Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // timezone\n      && request.resource.data.name is string\n      && request.resource.data.size() > 0\n      && request.resource.data.size() < 50\n\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field on so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:14:55.883Z] May 23, 2021 9:14:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:14:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:14:56.024Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1164"}
[warn] ⚠  firestore.rules:9:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:13:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:55:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:184:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:23:24.105Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly() {\n    return request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // timezone\n      && request.resource.data.name is string\n      && request.resource.data.size() > 0\n      && request.resource.data.size() < 50\n\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field on so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:23:24.121Z] May 23, 2021 9:23:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:23:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:23:24.381Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2561"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:90:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:219:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:23:27.514Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly() {\n    return request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // timezone\n      && request.resource.data.name is string\n      && request.resource.data.size() > 0\n      && request.resource.data.size() < 50\n\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field on so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:23:27.522Z] May 23, 2021 9:23:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:23:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:23:27.580Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2561"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:90:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:219:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:23:40.524Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // timezone\n      && request.resource.data.name is string\n      && request.resource.data.size() > 0\n      && request.resource.data.size() < 50\n\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field on so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:23:40.530Z] May 23, 2021 9:23:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:23:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:23:40.622Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // timezone\n      && request.resource.data.name is string\n      && request.resource.data.size() > 0\n      && request.resource.data.size() < 50\n\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field on so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:23:40.642Z] May 23, 2021 9:23:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:23:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:23:40.818Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2561"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:90:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:219:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T13:23:40.851Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2561"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:90:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:219:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T13:24:03.471Z] Exception in thread "pool-1-thread-18"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-18\" "}}
[debug] [2021-05-23T13:24:03.472Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n"}}
[debug] [2021-05-23T13:24:03.472Z] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T13:24:03.487Z] Exception in thread "pool-1-thread-17" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-17\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n"}}
[debug] [2021-05-23T13:24:03.487Z] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T13:24:03.517Z] Exception in thread "pool-1-thread-16" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-16\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled"}}
[debug] [2021-05-23T13:24:03.517Z] 
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\n"}}
[debug] [2021-05-23T13:24:03.517Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n"}}
[debug] [2021-05-23T13:24:03.521Z] 	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T13:24:03.521Z] Exception in thread "pool-1-thread-15"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-15\" "}}
[debug] [2021-05-23T13:24:03.523Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:25:00.896Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && hasExactly(request, [\"name\", \"timezone\"])\n\n      // timezone\n      && request.resource.data.name is string\n      && request.resource.data.size() > 0\n      && request.resource.data.size() < 50\n\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field on so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:25:00.901Z] May 23, 2021 9:25:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:25:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:25:01.032Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2561"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:89:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:218:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:26:32.427Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n    allow create: if userID == request.auth.uid\n      && hasExactly(request, [\"name\", \"timezone\"])\n\n      // name\n      && request.resource.data.name != null\n      && request.resource.data.name is string\n      && request.resource.data.name.size() > 0\n      && request.resource.data.name.size() < 50\n\n      // timezone\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field on so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:26:32.432Z] May 23, 2021 9:26:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:26:32 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:26:32.493Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2561"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:91:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:220:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:27:52.246Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // name\n      && request.resource.data.name != null\n      && request.resource.data.name is string\n      && request.resource.data.name.size() > 0\n      && request.resource.data.name.size() < 50\n\n      // timezone\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field on so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:27:52.250Z] May 23, 2021 9:27:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:27:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:27:52.337Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2561"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:95:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:224:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:28:00.482Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n\n    allow create: if userID == request.auth.uid\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // name\n      && request.resource.data.name != null\n      && request.resource.data.name is string\n      && request.resource.data.name.size() > 0\n      && request.resource.data.name.size() < 50\n\n      // timezone\n      && request.resource.data.timezone != null\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field on so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:28:00.489Z] May 23, 2021 9:28:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:28:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:28:00.565Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2561"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:96:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:225:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:36:39.283Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n\n    allow create: if userID == request.auth.uid\n      // reqeust data contains exactly the following fields\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // name\n      && request.resource.data.name != null\n      && request.resource.data.name is string\n      && request.resource.data.name.size() > 0\n      && request.resource.data.name.size() < 50\n\n      // timezone\n      && request.resource.data.timezone != null\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:36:39.307Z] May 23, 2021 9:36:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:36:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:36:39.454Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2561"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:97:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:226:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:36:51.900Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n\n    allow create: if userID == request.auth.uid\n      // reqeust data should contain exactly the following fields\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // name\n      && request.resource.data.name != null\n      && request.resource.data.name is string\n      && request.resource.data.name.size() > 0\n      && request.resource.data.name.size() < 50\n\n      // timezone\n      && request.resource.data.timezone != null\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:36:51.905Z] May 23, 2021 9:36:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:36:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:36:52.028Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2561"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:97:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:226:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:36:54.587Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n\n    allow create: if userID == request.auth.uid\n      // request data should contain exactly the following fields\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // name\n      && request.resource.data.name != null\n      && request.resource.data.name is string\n      && request.resource.data.name.size() > 0\n      && request.resource.data.name.size() < 50\n\n      // timezone\n      && request.resource.data.timezone != null\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:36:54.593Z] May 23, 2021 9:36:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:36:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:36:54.713Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2561"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:97:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:226:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T13:39:03.489Z] May 23, 2021 9:39:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 37
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 9:39:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 37\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T13:39:03.491Z] May 23, 2021 9:39:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 39
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 9:39:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 39\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T13:39:03.493Z] May 23, 2021 9:39:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 41
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 9:39:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 41\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T13:39:03.495Z] May 23, 2021 9:39:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 43
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 9:39:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 43\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T13:39:03.498Z] Exception in thread "pool-1-thread-25" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183) {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-25\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)"}}
[debug] [2021-05-23T13:39:03.498Z] 
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:39:18.430Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n\n    allow create: if userID == request.auth.uid\n      // request data should contain exactly the following fields\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // name\n      && request.resource.data.name is string\n      && request.resource.data.name.size() > 0\n      && request.resource.data.name.size() < 50\n\n      // timezone\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read, delete: if uid == request.auth.uid\n      allow create: if uid == request.auth.uid && request.resource.data.name != null\n      allow update: if uid == request.auth.uid && request.resource.data.name == resource.data.name\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:39:18.436Z] May 23, 2021 9:39:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:39:18 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:39:18.518Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2561"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:95:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:224:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:50:10.930Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n\n    allow create: if userID == request.auth.uid\n      // request data should contain exactly the following fields\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // name\n      && request.resource.data.name is string\n      && request.resource.data.name.size() > 0\n      && request.resource.data.name.size() < 50\n\n      // timezone\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if userID == request.auth.uid\n\n\n      allow create: if userID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n\n\n      allow update: if userID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if userID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if uid == request.auth.uid\n        allow update: if uid == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:50:10.957Z] May 23, 2021 9:50:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:50:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:50:11.167Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2563"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:95:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:276:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:50:39.005Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n\n    allow create: if userID == request.auth.uid\n      // request data should contain exactly the following fields\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // name\n      && request.resource.data.name is string\n      && request.resource.data.name.size() > 0\n      && request.resource.data.name.size() < 50\n\n      // timezone\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:50:39.056Z] May 23, 2021 9:50:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:50:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:50:39.219Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2563"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:95:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:276:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:52:42.541Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n\n    allow create: if userID == request.auth.uid\n      // request data should contain exactly the following fields\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // name\n      && request.resource.data.name is string\n      && request.resource.data.name.size() > 0\n      && request.resource.data.name.size() < 50\n\n      // timezone\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          // only change to notificication document should change read from false to true\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:52:42.551Z] May 23, 2021 9:52:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:52:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:52:42.653Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2563"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:95:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:275:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:52:54.660Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n\n    allow create: if userID == request.auth.uid\n      // request data should contain exactly the following fields\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // name\n      && request.resource.data.name is string\n      && request.resource.data.name.size() > 0\n      && request.resource.data.name.size() < 50\n\n      // timezone\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          // only change to notificication document should change read from false to true\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:52:54.667Z] May 23, 2021 9:52:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:52:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:52:54.733Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2563"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:95:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:275:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:52:54.761Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n\n  // each user should only be able to read/write to their own document where their document is specified using their uid as the document id\n  function user(userID) {\n    allow read: if userID == request.auth.uid\n\n\n    allow create: if userID == request.auth.uid\n      // request data should contain exactly the following fields\n      && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n      && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n      // name\n      && request.resource.data.name is string\n      && request.resource.data.name.size() > 0\n      && request.resource.data.name.size() < 50\n\n      // timezone\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n\n\n    allow update: if userID == request.auth.uid\n      // immutable fields\n      && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n      // mutable fields\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n        \"timezone\",\n        \"organization\",\n        \"background\",\n        \"preferences.autodetectTimezone\",\n        \"notifications.email\",\n        \"notifications.categories.account\",\n        \"notifications.categories.studies\",\n        \"notifications.categories.participants\",\n        \"notifications.categories.meetings\"\n      ])\n\n      // required field on creation so will definitely exist in document\n      && request.resource.data.timezone is string\n      && request.resource.data.timezone in validTimezoneList()\n\n      // optional field so may not exist in document\n      && request.resource.data.get(\"organization\", \"\") is string\n      && request.resource.data.get(\"background\", \"\") is string\n\n      && request.resource.data.get(\"preferences\", {}) is map\n      && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n      && request.resource.data.get(\"notifications\", {}) is map\n      && request.resource.data.get(\"notifications.email\", true) is bool\n      && request.resource.data.get(\"notifications.categories.account\", true) is bool\n      && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n      && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n      && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n    allow delete: if userID == request.auth.uid\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          // only change to notificication document should change read from false to true\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:52:54.770Z] May 23, 2021 9:52:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:52:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:52:54.850Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2563"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:51:5 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:95:53 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:275:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T13:54:03.474Z] Exception in thread "pool-1-thread-27" Exception in thread "pool-1-thread-26" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-27\" Exception in thread \"pool-1-thread-26\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T13:54:03.475Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T13:54:03.475Z] Exception in thread "pool-1-thread-24"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-24\" "}}
[debug] [2021-05-23T13:54:03.476Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n"}}
[debug] [2021-05-23T13:54:03.476Z] 	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T13:54:03.518Z] Exception in thread "pool-1-thread-28" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748) {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-28\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)"}}
[debug] [2021-05-23T13:54:03.518Z] 
Exception in thread "pool-1-thread-33" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\nException in thread \"pool-1-thread-33\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T13:54:03.519Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:55:05.115Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          // only change to notificication document should change read from false to true\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:55:05.119Z] May 23, 2021 9:55:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:55:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:55:05.379Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1877"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:55:08.881Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          // only change to notificication document should change read from false to true\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:55:08.887Z] May 23, 2021 9:55:08 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:55:08 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:55:08.990Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1877"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:55:10.763Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          // only change to notificication document should change read from false to true\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid && request.resource.data.name != null\n      allow update: if participantID == request.auth.uid && request.resource.data.name == resource.data.name\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:55:10.770Z] May 23, 2021 9:55:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:55:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:55:10.872Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1877"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:56:09.765Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          // only change to notificication document should change read from false to true\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid\n      allow update: if participantID == request.auth.uid\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if participantID == request.auth.uid\n        allow update: if participantID == request.auth.uid\n        \t&& resource.data.title == request.resource.data.title\n          && resource.data.description == request.resource.data.description\n          && resource.data.time == request.resource.data.time\n          && resource.data.type == request.resource.data.type\n          && resource.data.read == false && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:56:09.772Z] May 23, 2021 9:56:09 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:56:09 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:56:09.957Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1877"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:56:16.705Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          // only change to notificication document should change read from false to true\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid\n      allow update: if participantID == request.auth.uid\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          // only change to notificication document should change read from false to true\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:56:16.711Z] May 23, 2021 9:56:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:56:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:56:16.778Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1877"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:56:59.308Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, delete: if participantID == request.auth.uid\n      allow create: if participantID == request.auth.uid\n      allow update: if participantID == request.auth.uid\n\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:56:59.314Z] May 23, 2021 9:56:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:56:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:56:59.433Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1877"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:57:15.084Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read, update, delete: if resource.data.researcher.id == request.auth.uid\n      allow read: if request.auth != null\n\n      match /surveys/{surveyID} {\n        \tallow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:57:15.089Z] May 23, 2021 9:57:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:57:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:57:15.179Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1877"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T13:59:58.486Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update, delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write: if true\n      }\n      // allow read if custom claim is participant\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n\n        // allow create by participant\n\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T13:59:58.489Z] May 23, 2021 9:59:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 9:59:58 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T13:59:58.551Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1877"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:01:31.084Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update:\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write: if true\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:01:31.090Z] May 23, 2021 10:01:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:01:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:01:31.207Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2108"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:128:7 - ERROR Unexpected 'allow'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:01:57.931Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update:\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write: if true\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:01:57.933Z] May 23, 2021 10:01:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:01:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:01:58.006Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2108"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:128:7 - ERROR Unexpected 'allow'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:02:06.442Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update:\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write: if true\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:02:06.445Z] May 23, 2021 10:02:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:02:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:02:06.509Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2108"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:128:7 - ERROR Unexpected 'allow'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:02:53.879Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write: if true\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:02:53.883Z] May 23, 2021 10:02:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:02:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:02:54.086Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2131"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:128:7 - ERROR Missing conditional expression after 'if'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:05:19.758Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    published: false,\n    activated: false,\n\n    type: data.type,\n    title: data.title,\n    description: data.shortDescription,\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.resource.data.keys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write: if true\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:05:19.853Z] May 23, 2021 10:05:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:05:19 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:05:20.103Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2112"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:125:5 - ERROR Unexpected 'published'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:05:42.361Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.keys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write: if true\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:05:42.389Z] May 23, 2021 10:05:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:05:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:05:42.540Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1877"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:05:45.062Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.keys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write: if true\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:05:45.067Z] May 23, 2021 10:05:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:05:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:05:45.122Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1877"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:07:53.070Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n        allow update: if researcherID == request.auth.uid\n          // only allow read attribute to be changed from false to true\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n        &&\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:07:53.100Z] May 23, 2021 10:07:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:07:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:07:53.306Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2336"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:130:7 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:130:19 - ERROR Unexpected ':'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:08:26.881Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n        &&\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:08:26.888Z] May 23, 2021 10:08:26 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:08:26 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:08:26.949Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2336"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:132:7 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:132:19 - ERROR Unexpected ':'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T14:09:03.492Z] May 23, 2021 10:09:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 59
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 10:09:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 59\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T14:09:03.496Z] May 23, 2021 10:09:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 61
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 10:09:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 61\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T14:09:03.500Z] May 23, 2021 10:09:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 63
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 10:09:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 63\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T14:09:03.503Z] May 23, 2021 10:09:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 55
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 10:09:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 55\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T14:09:03.505Z] May 23, 2021 10:09:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 57
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 10:09:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 57\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:11:53.007Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n        && request.resource.data.diff(resource.data).affectedKeys().hasAny([\"published\"])\n        && request.resource.data.published == false\n        && request.resource.data.published == true\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:11:53.013Z] May 23, 2021 10:11:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:11:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:11:53.116Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1877"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:14:55.112Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        &&\n          !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"published\"]) || (\n            && request.resource.data.title.\n            && request.resource.data.published == false\n            && request.resource.data.published == true\n          )\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:14:55.148Z] May 23, 2021 10:14:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:14:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:14:55.612Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2563"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:142:13 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:143:13 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:145:11 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:15:02.705Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"published\"]) || (\n          && request.resource.data.title.\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:15:02.712Z] May 23, 2021 10:15:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:15:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:15:02.808Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2562"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:141:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:142:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:144:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:16:07.271Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"published\"]) || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"activated\"]) || (\n          && request.resource.data.published == true\n          && request.resource.data.activated is bool\n          && request.resource.data.activated == false\n          && request.resource.data.activated == true\n        )\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:16:07.277Z] May 23, 2021 10:16:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:16:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:16:07.376Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:141:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:144:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:16:28.215Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"published\"]) || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"activated\"]) || (\n          && request.resource.data.published == true\n          && request.resource.data.activated is bool\n          && request.resource.data.activated == resource.data.activated\n        )\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:16:28.220Z] May 23, 2021 10:16:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:16:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:16:28.338Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:141:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:144:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:18:42.650Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"published\"]) || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"activated\"]) || (\n          && request.resource.data.published == true\n          && request.resource.data.activated is bool\n          && request.resource.data.activated != resource.data.activated\n        )\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:18:42.693Z] May 23, 2021 10:18:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:18:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:18:42.767Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:141:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:144:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:22:08.234Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"published\"]) || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"activated\"]) || (\n          && request.resource.data.published == true\n          && request.resource.data.activated is bool\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:22:08.238Z] May 23, 2021 10:22:08 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:22:08 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:22:08.292Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:141:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:144:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:22:41.364Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"published\"]) || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"activated\"]) || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:22:41.372Z] May 23, 2021 10:22:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:22:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:22:41.450Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:141:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:144:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T14:24:03.522Z] Exception in thread "pool-1-thread-41"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-41\" "}}
[debug] [2021-05-23T14:24:03.524Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T14:24:03.532Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n"}}
[debug] [2021-05-23T14:24:03.536Z] 	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T14:24:03.536Z] Exception in thread "pool-1-thread-37"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-37\" "}}
[debug] [2021-05-23T14:24:03.537Z] Exception in thread "pool-1-thread-36"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-36\" "}}
[debug] [2021-05-23T14:24:03.537Z] Exception in thread "pool-1-thread-42"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-42\" "}}
[debug] [2021-05-23T14:24:03.537Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T14:24:03.537Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T14:24:03.539Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T14:24:03.539Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:25:02.179Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n        allow create: if participantID == request.auth.uid && request.resource.data.status == \"interested\"\n        allow read, update, delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:25:02.217Z] May 23, 2021 10:25:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:25:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:25:02.297Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:141:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:144:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:30:35.680Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:30:35.688Z] May 23, 2021 10:30:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:30:35 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:30:35.782Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:141:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:144:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:31:41.341Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:31:41.346Z] May 23, 2021 10:31:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:31:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:31:41.425Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:11:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:15:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:19:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:145:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:148:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:35:01.863Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldChanged(request, resource, fieldName) {\n    return !fieldIncoming(request, fieldName) || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function fieldExists(resource, fieldName) {\n    return fieldName in resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldIncoming(request, fieldName) {\n    return fieldName in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:35:01.873Z] May 23, 2021 10:35:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:35:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:35:01.985Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:23:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:27:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:31:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:35:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:40:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:44:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:53:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:57:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:157:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:160:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T14:39:03.508Z] Exception in thread "pool-1-thread-47" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-47\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n"}}
[debug] [2021-05-23T14:39:03.508Z] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T14:39:03.519Z] Exception in thread "pool-1-thread-43" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-43\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T14:39:03.519Z] Exception in thread "pool-1-thread-48"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-48\" "}}
[debug] [2021-05-23T14:39:03.519Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled"}}
[debug] [2021-05-23T14:39:03.520Z] 
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T14:39:03.520Z] Exception in thread "pool-1-thread-45" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-45\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n"}}
[debug] [2021-05-23T14:39:03.520Z] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T14:39:03.550Z] Exception in thread "pool-1-thread-44" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-44\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T14:39:03.551Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:39:10.979Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldChanged(request, resource, name) {\n    return !fieldIncoming(request, name)\n      || request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldExists(resource, name) {\n    return name in resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldIncoming(request, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:39:10.984Z] May 23, 2021 10:39:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:39:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:39:11.087Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:24:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:36:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:54:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:58:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:158:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:161:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:39:54.195Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldChanged(request, resource, name) {\n    return !fieldIncoming(request, name)\n      || request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:39:54.206Z] May 23, 2021 10:39:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:39:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:39:54.324Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:20:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:24:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:37:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:50:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:54:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:154:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:157:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:40:06.313Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldChanged(request, resource, name) {\n    return !fieldAffected(request.resource.data, name)\n      || request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:40:06.319Z] May 23, 2021 10:40:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:40:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:40:06.382Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:20:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:24:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:37:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:50:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:54:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:154:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:157:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:41:38.633Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldChanged(request, resource, name) {\n    return !fieldAffected(request.resource.data, name)\n      || request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:41:38.663Z] May 23, 2021 10:41:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:41:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:41:38.786Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:20:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:24:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:37:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:50:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:54:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:154:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:157:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:41:40.405Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldChanged(request, resource, name) {\n    return !fieldAffected(request.resource.data, name)\n      || request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n        && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:41:40.412Z] May 23, 2021 10:41:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:41:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:41:40.509Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:20:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:24:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:37:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:50:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:54:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:154:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:157:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:41:43.686Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldChanged(request, resource, name) {\n    return !fieldAffected(request.resource.data, name)\n        || request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n        && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:41:43.707Z] May 23, 2021 10:41:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:41:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:41:43.786Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldChanged(request, resource, name) {\n    return !fieldAffected(request.resource.data, name)\n        || request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n        && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:41:43.800Z] May 23, 2021 10:41:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:41:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:41:43.929Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:20:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:24:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:37:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:50:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:54:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:154:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:157:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T14:41:44.020Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:20:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:24:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:37:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:50:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:54:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:154:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:157:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:41:48.347Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldChanged(request, resource, name) {\n    return !fieldAffected(request.resource.data, name)\n      || request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:41:48.353Z] May 23, 2021 10:41:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:41:48 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:41:48.416Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:20:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:24:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:37:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:50:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:54:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:154:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:157:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:41:57.480Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldChanged(request, resource, name) {\n    return !fieldAffected(request.resource.data, name)\n      || request.resource.data[name] != resource.data[name]\n  }\n\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:41:57.483Z] May 23, 2021 10:41:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:41:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:41:57.545Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:20:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:24:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:37:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:50:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:54:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:154:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:157:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:42:40.791Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return !fieldAffected(request.resource.data, name)\n      || fieldDifferent(request, resource, name)\n  }\n\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly() {\n\n  }\n\n  function hasAll() {\n\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:42:40.830Z] May 23, 2021 10:42:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:42:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:42:40.907Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2333"}
[warn] ⚠  firestore.rules:24:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:28:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:36:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:54:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:58:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:158:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:161:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:45:02.155Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return !fieldAffected(request.resource.data, name)\n      || fieldDifferent(request, resource, name)\n  }\n\n  // document creation\n  function hasExactly(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:45:02.176Z] May 23, 2021 10:45:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:45:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:45:02.292Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1871"}
[warn] ⚠  firestore.rules:32:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:36:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:41:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:45:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:54:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:58:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:158:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:161:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:45:22.919Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return !fieldAffected(request.resource.data, name)\n      || fieldDifferent(request, resource, name)\n  }\n\n  // document creation\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:45:22.926Z] May 23, 2021 10:45:22 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:45:22 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:45:23.010Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1869"}
[warn] ⚠  firestore.rules:31:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:35:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:40:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:44:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:53:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:57:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:157:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:160:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:45:36.228Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return !fieldAffected(request.resource.data, name)\n      || fieldDifferent(request, resource, name)\n  }\n\n  // document creation\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n\n\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:45:36.233Z] May 23, 2021 10:45:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:45:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:45:36.315Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1869"}
[warn] ⚠  firestore.rules:30:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:34:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:39:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:43:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:52:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:56:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:156:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:159:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:45:45.130Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return !fieldAffected(request.resource.data, name)\n      || fieldDifferent(request, resource, name)\n  }\n\n  // document creation\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:45:45.135Z] May 23, 2021 10:45:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:45:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:45:45.205Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1869"}
[warn] ⚠  firestore.rules:31:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:35:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:40:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:44:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:53:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:57:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:157:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:160:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:47:26.520Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return !fieldAffected(request.resource.data, name) || fieldDifferent(request, resource, name)\n  }\n\n  // document creation\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:47:26.526Z] May 23, 2021 10:47:26 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:47:26 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:47:26.716Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1869"}
[warn] ⚠  firestore.rules:30:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:34:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:39:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:43:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:52:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:56:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:156:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:159:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:47:29.131Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return !fieldAffected(request.resource.data, name) || fieldDifferent(request, resource, name)\n  }\n\n  // document creation\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:47:29.140Z] May 23, 2021 10:47:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:47:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:47:29.202Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1869"}
[warn] ⚠  firestore.rules:30:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:34:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:39:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:43:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:52:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:56:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:156:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:159:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:47:45.085Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(data, name) {\n    return name in data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // document creation\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:47:45.096Z] May 23, 2021 10:47:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:47:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:47:45.197Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1869"}
[warn] ⚠  firestore.rules:30:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:34:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:39:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:43:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:52:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:56:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:156:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:159:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:49:27.503Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // document creation\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function requiredFields(request, fields) {\n\n  }\n\n  function optionalFields() {\n\n  }\n\n  // document updation\n  function mutableFields(request, fields) {\n\n  }\n\n  function immutableFields(request, fields) {\n\n  }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:49:27.510Z] May 23, 2021 10:49:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:49:27 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:49:27.592Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1869"}
[warn] ⚠  firestore.rules:30:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:34:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:39:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:43:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:52:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:56:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:156:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:159:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:49:59.238Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // document creation\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:49:59.252Z] May 23, 2021 10:49:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:49:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:49:59.355Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"941"}
[warn] ⚠  firestore.rules:52:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:56:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:156:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:159:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:50:03.043Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:50:03.054Z] May 23, 2021 10:50:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:50:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:50:03.119Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"941"}
[warn] ⚠  firestore.rules:51:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:55:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:155:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:158:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:50:03.142Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function readUser(userID, uid) {\n\n  }\n\n  function createUser() {\n\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:50:03.147Z] May 23, 2021 10:50:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:50:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:50:03.207Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"941"}
[warn] ⚠  firestore.rules:51:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:55:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:155:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:158:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T14:50:24.420Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n          && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.times == request.resource.data.times\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T14:50:24.456Z] May 23, 2021 10:50:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 10:50:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T14:50:24.778Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:147:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:150:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T14:54:03.522Z] May 23, 2021 10:54:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 87
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 10:54:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 87\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T14:54:03.528Z] May 23, 2021 10:54:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 89
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 10:54:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 89\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T14:54:03.528Z] May 23, 2021 10:54:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 91
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 10:54:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 91\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T14:54:03.530Z] May 23, 2021 10:54:03 AM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 93
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 10:54:03 AM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 93\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:02:03.408Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n\n          && request.resource.data.fakename.size() in validTimezoneList()\n\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:02:03.446Z] May 23, 2021 11:02:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:02:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:02:03.662Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:02:28.015Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n\n          && request.resource.data.timezone in validTimezoneList()\n\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:02:28.024Z] May 23, 2021 11:02:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:02:28 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:02:28.099Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:02:39.839Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n\n          && request.resource.data.timezone in validTimezoneList()\n\n          && request.resource.data.responses is list\n\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:02:39.849Z] May 23, 2021 11:02:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:02:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:02:39.938Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n\n          && request.resource.data.timezone in validTimezoneList()\n\n          && request.resource.data.responses is list\n\n          && request.resource.data.status == \"interested\"\n          && request.resource\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:02:39.941Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T15:02:39.946Z] May 23, 2021 11:02:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:02:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:02:40.010Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:02:46.905Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:02:46.911Z] May 23, 2021 11:02:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:02:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:02:46.985Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:02:47.007Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:02:47.011Z] May 23, 2021 11:02:47 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:02:47 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:02:47.081Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:02:56.791Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read, write: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:02:56.795Z] May 23, 2021 11:02:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:02:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:02:56.855Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:04:04.437Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:04:04.441Z] May 23, 2021 11:04:04 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:04:04 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:04:04.509Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:05:04.744Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          &&\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            // immutable fields\n            && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n            // mutable fields\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n              \"timezone\",\n              \"organization\",\n              \"background\",\n              \"preferences.autodetectTimezone\",\n              \"notifications.email\",\n              \"notifications.categories.account\",\n              \"notifications.categories.studies\",\n              \"notifications.categories.participants\",\n              \"notifications.categories.meetings\"\n            ])\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:05:04.749Z] May 23, 2021 11:05:04 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:05:04 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:05:04.825Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"932"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:182:9 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:182:21 - ERROR Unexpected ':'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:05:46.824Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          &&\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            // immutable fields\n            && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n            // mutable fields\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n              \"timezone\",\n              \"organization\",\n              \"background\",\n              \"preferences.autodetectTimezone\",\n              \"notifications.email\",\n              \"notifications.categories.account\",\n              \"notifications.categories.studies\",\n              \"notifications.categories.participants\",\n              \"notifications.categories.meetings\"\n            ])\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:05:46.830Z] May 23, 2021 11:05:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:05:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:05:46.904Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"932"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:182:9 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:182:21 - ERROR Unexpected ':'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:07:40.266Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          &&\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && // mutable fields\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n              \"timezone\",\n              \"organization\",\n              \"background\",\n              \"preferences.autodetectTimezone\",\n              \"notifications.email\",\n              \"notifications.categories.account\",\n              \"notifications.categories.studies\",\n              \"notifications.categories.participants\",\n              \"notifications.categories.meetings\"\n            ])\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:07:40.272Z] May 23, 2021 11:07:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:07:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:07:40.372Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"1161"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:182:9 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:182:21 - ERROR Unexpected ':'. 
[warn] ⚠  firestore.rules:192:13 - ERROR Unexpected '&&'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:07:44.248Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          &&\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            // mutable fields\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n              \"timezone\",\n              \"organization\",\n              \"background\",\n              \"preferences.autodetectTimezone\",\n              \"notifications.email\",\n              \"notifications.categories.account\",\n              \"notifications.categories.studies\",\n              \"notifications.categories.participants\",\n              \"notifications.categories.meetings\"\n            ])\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:07:44.251Z] May 23, 2021 11:07:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:07:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:07:44.340Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"932"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:182:9 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:182:21 - ERROR Unexpected ':'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:08:00.969Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          &&\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            // mutable fields\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:08:00.997Z] May 23, 2021 11:08:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:08:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:08:01.156Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"932"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:182:9 - ERROR Unexpected 'allow'. 
[warn] ⚠  firestore.rules:182:21 - ERROR Unexpected ':'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T15:09:03.548Z] Exception in thread "pool-1-thread-52"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-52\" "}}
[debug] [2021-05-23T15:09:03.549Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T15:09:03.549Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T15:09:03.550Z] Exception in thread "pool-1-thread-55"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-55\" "}}
[debug] [2021-05-23T15:09:03.550Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n"}}
[debug] [2021-05-23T15:09:03.551Z] 	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Exception in thread "pool-1-thread-53" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nException in thread \"pool-1-thread-53\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T15:09:03.552Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:09:20.926Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            // mutable fields\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:09:20.976Z] May 23, 2021 11:09:20 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:09:20 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:09:21.082Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:11:30.923Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n\n        // name\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n\n        // timezone\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status is string\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            // mutable fields\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:11:30.930Z] May 23, 2021 11:11:30 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:11:30 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:11:31.000Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:150:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:153:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:11:45.656Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status is string\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            // mutable fields\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:11:45.706Z] May 23, 2021 11:11:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:11:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:11:45.799Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:12:16.096Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status is string\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:12:16.159Z] May 23, 2021 11:12:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:12:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:12:16.338Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:14:23.832Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status is string\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:14:23.836Z] May 23, 2021 11:14:23 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:14:23 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:14:23.901Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:15:14.394Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:15:14.399Z] May 23, 2021 11:15:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:15:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:15:14.469Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:15:33.753Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:15:33.760Z] May 23, 2021 11:15:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:15:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:15:33.828Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:18:52.086Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:18:52.093Z] May 23, 2021 11:18:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:18:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:18:52.169Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:19:12.053Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:19:12.097Z] May 23, 2021 11:19:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:19:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:19:12.337Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:147:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:150:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:19:20.390Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid) // can update each others' reads\n            && resource.data.user == request.resource.data.user\n            && resource.data.time == request.resource.data.time\n            && resource.data.text == request.resource.data.text\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:19:20.395Z] May 23, 2021 11:19:20 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:19:20 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:19:20.464Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:148:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:151:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:22:06.805Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid && (getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid)\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:22:06.826Z] May 23, 2021 11:22:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:22:06 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:22:06.926Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:148:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:151:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:23:47.259Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user\n            && request.resource.data.text\n            && request.resource.data.time\n            && request.resource.data.read\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:23:47.262Z] May 23, 2021 11:23:47 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:23:47 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:23:47.333Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:148:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:151:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T15:24:03.548Z] Exception in thread "pool-1-thread-54" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-54\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled"}}
[debug] [2021-05-23T15:24:03.549Z] 
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T15:24:03.553Z] Exception in thread "pool-1-thread-60" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360) {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-60\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)"}}
[debug] [2021-05-23T15:24:03.554Z] 
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n"}}
[debug] [2021-05-23T15:24:03.554Z] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T15:24:03.554Z] Exception in thread "pool-1-thread-51" Exception in thread "pool-1-thread-62" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-51\" Exception in thread \"pool-1-thread-62\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n"}}
[debug] [2021-05-23T15:24:03.554Z] 	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n"}}
[debug] [2021-05-23T15:24:03.555Z] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T15:24:03.555Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n"}}
[debug] [2021-05-23T15:24:03.555Z] 	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T15:24:03.573Z] Exception in thread "pool-1-thread-63"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-63\" "}}
[debug] [2021-05-23T15:24:03.573Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:27:22.754Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if researcherID == request.auth.uid\n\n      allow create: if researcherID == request.auth.uid\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:27:22.783Z] May 23, 2021 11:27:22 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:27:22 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:27:22.882Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:148:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:151:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:27:53.436Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if researcherID == request.auth.uid\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:27:53.442Z] May 23, 2021 11:27:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:27:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:27:53.536Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:148:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:151:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:28:03.615Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if researcherID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:28:03.620Z] May 23, 2021 11:28:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:28:03 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:28:03.688Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:148:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:151:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:28:23.354Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n\n        // only allow read attribute to be changed from false to true\n        allow update: if request.auth.uid == researcherID\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if participantID == request.auth.uid\n\n      match /notifications/{notificationID} {\n      \tallow read: if researcherID == request.auth.uid\n\n        // only allow read attribute to be changed from false to true\n        allow update: if researcherID == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:28:23.357Z] May 23, 2021 11:28:23 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:28:23 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:28:23.440Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:148:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:151:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:28:39.342Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n\n        // only allow read attribute to be changed from false to true\n        allow update: if request.auth.uid == researcherID\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n\n        // only allow read attribute to be changed from false to true\n        allow update: if request.auth.uid == participantID\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:28:39.352Z] May 23, 2021 11:28:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:28:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:28:39.430Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:148:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:151:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:29:25.088Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false\n      && request.resource.data.read == true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n\n        // only allow read attribute to be changed from false to true\n        allow update: if request.auth.uid == researcherID\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n\n        // only allow read attribute to be changed from false to true\n        allow update: if request.auth.uid == participantID\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:29:25.093Z] May 23, 2021 11:29:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:29:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:29:25.202Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:157:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:160:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:29:47.518Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false\n      && request.resource.data.read == true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n\n        // only allow read attribute to be changed from false to true\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n\n        // only allow read attribute to be changed from false to true\n        allow update: if request.auth.uid == participantID\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:29:47.533Z] May 23, 2021 11:29:47 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:29:47 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:29:47.611Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:153:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:156:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:29:59.166Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false\n      && request.resource.data.read == true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n\n        // only allow read attribute to be changed from false to true\n        allow update: if request.auth.uid == participantID\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n        \t&& request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n          && resource.data.read == false\n          && request.resource.data.read == true\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:29:59.219Z] May 23, 2021 11:29:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:29:59 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:29:59.400Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:152:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:155:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:30:13.280Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false\n      && request.resource.data.read == true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n\n        // only allow read attribute to be changed from false to true\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:30:13.293Z] May 23, 2021 11:30:13 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:30:13 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:30:13.375Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false\n      && request.resource.data.read == true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n\n        // only allow read attribute to be changed from false to true\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:30:13.379Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:148:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:151:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T15:30:13.381Z] May 23, 2021 11:30:13 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:30:13 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:30:13.449Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:148:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:151:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:30:17.689Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false\n      && request.resource.data.read == true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:30:17.694Z] May 23, 2021 11:30:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:30:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:30:17.769Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:146:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:149:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:32:07.679Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false\n      && request.resource.data.read == true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:32:07.726Z] May 23, 2021 11:32:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:32:07 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:32:07.821Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:150:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:153:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:37:23.835Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false && request.resource.data.read == true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:37:23.843Z] May 23, 2021 11:37:23 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:37:23 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:37:23.965Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:149:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:152:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:37:34.723Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false\n      && request.resource.data.read == true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:37:34.728Z] May 23, 2021 11:37:34 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:37:34 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:37:34.788Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:150:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:153:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:38:05.894Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:38:05.899Z] May 23, 2021 11:38:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:38:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:38:05.982Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:150:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:153:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T15:39:03.594Z] Exception in thread "pool-1-thread-67"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-67\" "}}
[debug] [2021-05-23T15:39:03.596Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:39:22.696Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if resource.data.researcher.id == request.auth.uid\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:39:22.705Z] May 23, 2021 11:39:22 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:39:22 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:39:22.795Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:149:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:152:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:42:30.552Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if resource.data.researcher.id == request.auth.uid;\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:42:30.558Z] May 23, 2021 11:42:30 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:42:30 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:42:30.650Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:149:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:152:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:42:37.585Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if participantID == request.auth.uid\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:42:37.590Z] May 23, 2021 11:42:37 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:42:37 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:42:37.663Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:149:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:152:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:42:43.246Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || getStudyData(studyID).researcher.id == request.auth.uid\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:42:43.251Z] May 23, 2021 11:42:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:42:43 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:42:43.327Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:149:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:152:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:42:49.272Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid\n          allow create: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:42:49.277Z] May 23, 2021 11:42:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:42:49 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:42:49.350Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:149:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:152:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:43:02.206Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:43:02.212Z] May 23, 2021 11:43:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:43:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:43:02.283Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:149:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:152:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:43:36.353Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              getStudyData(studyID).researcher.id == request.auth.uid\n              || participantID == request.auth.uid\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:43:36.358Z] May 23, 2021 11:43:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:43:36 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:43:36.453Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:149:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:152:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:43:54.253Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:43:54.258Z] May 23, 2021 11:43:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:43:54 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:43:54.372Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:149:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:152:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:44:08.519Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.title == request.resource.data.title\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:44:08.523Z] May 23, 2021 11:44:08 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:44:08 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:44:08.592Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"473"}
[warn] ⚠  firestore.rules:149:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:152:9 - ERROR Unexpected ')'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:49:15.524Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n\n\n      allow update: if request.resource.data.keys().hasAll([\"title\", \"body\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n\n\n      (request.auth.uid == resource.data.participantID\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:49:15.531Z] May 23, 2021 11:49:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:49:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:49:15.618Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"702"}
[warn] ⚠  firestore.rules:149:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:152:9 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:255:7 - ERROR Unexpected '('. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:50:02.446Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.endDate is string\n\n\n      allow update: if request.resource.data.keys().hasAll([\"title\", \"body\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n\n\n      (request.auth.uid == resource.data.participantID\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:50:02.457Z] May 23, 2021 11:50:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:50:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:50:02.544Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"702"}
[warn] ⚠  firestore.rules:149:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:152:9 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:257:7 - ERROR Unexpected '('. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:52:39.143Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n\n\n      allow update: if request.resource.data.keys().hasAll([\"title\", \"body\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n\n\n      (request.auth.uid == resource.data.participantID\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:52:39.169Z] May 23, 2021 11:52:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:52:39 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:52:39.293Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"2950"}
[warn] ⚠  firestore.rules:149:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:152:9 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:250:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:250:54 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:250:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:250:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:250:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:250:105 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:250:106 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:250:106 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:250:107 - ERROR mismatched input ')' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:258:7 - ERROR Unexpected '('. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:52:53.502Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n\n\n      allow update: if request.resource.data.keys().hasAll([\"title\", \"body\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n\n\n      (request.auth.uid == resource.data.participantID\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:52:53.507Z] May 23, 2021 11:52:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:52:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:52:53.587Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"5534"}
[warn] ⚠  firestore.rules:149:11 - ERROR Unexpected '&&'. 
[warn] ⚠  firestore.rules:152:9 - ERROR Unexpected ')'. 
[warn] ⚠  firestore.rules:250:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:250:54 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:250:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:250:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:250:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:250:105 - ERROR Unexpected '$'. 
[warn] ⚠  firestore.rules:250:106 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:250:106 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:250:107 - ERROR mismatched input ')' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:252:50 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:252:50 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:252:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:252:52 - ERROR mismatched input '(' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:252:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:252:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:252:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:252:104 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:252:104 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:252:105 - ERROR mismatched input ')' expecting {'{', '/', PATH_SEGMENT} 
[warn] ⚠  firestore.rules:259:7 - ERROR Unexpected '('. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:53:24.389Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n\n\n      allow update: if request.resource.data.keys().hasAll([\"title\", \"body\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n\n\n      (request.auth.uid == resource.data.participantID\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:53:24.406Z] May 23, 2021 11:53:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:53:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:53:24.505Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"4607"}
[warn] ⚠  firestore.rules:17:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:17:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:17:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:17:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:17:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:17:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:70:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:254:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:254:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:254:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:254:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:256:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:256:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:305:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T15:54:03.603Z] Exception in thread "pool-1-thread-65" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523) {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-65\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)"}}
[debug] [2021-05-23T15:54:03.603Z] 
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Exception in thread "pool-1-thread-66" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nException in thread \"pool-1-thread-66\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T15:54:03.604Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T15:54:03.605Z] Exception in thread "pool-1-thread-73" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-73\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T15:54:03.606Z] Exception in thread "pool-1-thread-68" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-68\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T15:54:03.607Z] Exception in thread "pool-1-thread-64" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-64\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:54:52.542Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n      )\n\n\n      (request.auth.uid == resource.data.participantID\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:54:52.568Z] May 23, 2021 11:54:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:54:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:54:52.658Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"4607"}
[warn] ⚠  firestore.rules:17:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:17:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:17:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:17:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:17:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:17:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:70:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:254:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:254:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:254:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:254:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:256:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:256:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:312:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:55:52.759Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n      )\n\n\n      (request.auth.uid == resource.data.participantID\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:55:52.782Z] May 23, 2021 11:55:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:55:52 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:55:52.875Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"4607"}
[warn] ⚠  firestore.rules:17:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:17:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:17:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:17:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:17:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:17:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:70:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:254:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:254:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:254:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:254:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:256:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:256:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:312:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:56:56.712Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n\n      (request.auth.uid == resource.data.participantID\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:56:56.733Z] May 23, 2021 11:56:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:56:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:56:56.821Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"6581"}
[warn] ⚠  firestore.rules:17:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:17:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:17:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:17:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:17:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:17:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:70:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:254:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:254:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:254:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:254:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:256:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:256:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:273:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:273:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:275:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:275:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:321:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:57:33.214Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n\n      (request.auth.uid == resource.data.participantID\n          && resource.data.times == request.resource.data.times\n          && resource.data.startDate == request.resource.data.startDate\n          && resource.data.endDate == request.resource.data.endDate\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:57:33.218Z] May 23, 2021 11:57:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:57:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:57:33.291Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"6581"}
[warn] ⚠  firestore.rules:17:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:17:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:17:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:17:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:17:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:17:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:70:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:254:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:254:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:254:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:254:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:256:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:256:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:273:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:273:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:275:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:275:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:321:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:57:40.470Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:57:40.479Z] May 23, 2021 11:57:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:57:40 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:57:40.570Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"6581"}
[warn] ⚠  firestore.rules:17:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:17:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:17:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:17:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:17:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:17:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:70:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:254:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:254:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:254:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:254:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:256:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:256:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:273:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:273:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:275:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:275:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:57:56.798Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:57:56.804Z] May 23, 2021 11:57:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:57:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:57:56.888Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"6581"}
[warn] ⚠  firestore.rules:17:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:17:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:17:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:17:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:17:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:17:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:70:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:254:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:254:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:254:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:254:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:256:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:256:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:273:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:273:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:275:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:275:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:58:05.333Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow write: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:58:05.337Z] May 23, 2021 11:58:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:58:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:58:05.411Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"6581"}
[warn] ⚠  firestore.rules:17:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:17:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:17:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:17:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:17:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:17:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:70:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:254:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:254:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:254:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:254:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:256:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:256:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:273:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:273:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:275:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:275:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T15:58:50.972Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (request.auth.uid == resource.data.participantID\n          && resource.data.name == request.resource.data.name\n          && resource.data.link == request.resource.data.link\n          && resource.data.time == request.resource.data.time\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID\n          && request.resource.data.confirmedByParticipant == true)\n\t\t\t\t\t|| (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n          && resource.data.participantID == request.resource.data.participantID\n          && resource.data.researcherID == request.resource.data.researcherID\n          && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T15:58:50.976Z] May 23, 2021 11:58:50 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 11:58:50 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T15:58:51.053Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"6581"}
[warn] ⚠  firestore.rules:17:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:17:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:17:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:17:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:17:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:17:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:70:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:254:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:254:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:254:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:254:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:256:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:256:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:273:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:273:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:275:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:275:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T16:09:03.625Z] May 23, 2021 12:09:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 135
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 12:09:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 135\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T16:09:03.628Z] May 23, 2021 12:09:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 137
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 12:09:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 137\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T16:09:03.633Z] May 23, 2021 12:09:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 139
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 12:09:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 139\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T16:09:03.639Z] May 23, 2021 12:09:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 143
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 12:09:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 143\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T16:24:03.712Z] Exception in thread "pool-1-thread-77"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-77\" "}}
[debug] [2021-05-23T16:24:03.713Z] Exception in thread "pool-1-thread-78" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-78\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T16:24:03.717Z] Exception in thread "pool-1-thread-75" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-75\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T16:24:03.718Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T16:24:03.721Z] Exception in thread "pool-1-thread-74" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-74\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n"}}
[debug] [2021-05-23T16:24:03.722Z] 	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T16:24:03.723Z] Exception in thread "pool-1-thread-76" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-76\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n"}}
[debug] [2021-05-23T16:24:03.724Z] 	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T16:39:03.715Z] May 23, 2021 12:39:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 155
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

May 23, 2021 12:39:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 157
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 12:39:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 155\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\nMay 23, 2021 12:39:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 157\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T16:39:03.716Z] May 23, 2021 12:39:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 159
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 12:39:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 159\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T16:39:03.717Z] May 23, 2021 12:39:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 161
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 12:39:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 161\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T16:39:03.720Z] May 23, 2021 12:39:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 163
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 12:39:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 163\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T16:54:03.692Z] Exception in thread "pool-1-thread-87"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-87\" "}}
[debug] [2021-05-23T16:54:03.694Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T16:54:03.710Z] Exception in thread "pool-1-thread-86"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-86\" "}}
[debug] [2021-05-23T16:54:03.710Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T16:54:03.711Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T16:54:03.711Z] Exception in thread "pool-1-thread-85" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Exception in thread "pool-1-thread-84"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-85\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nException in thread \"pool-1-thread-84\" "}}
[debug] [2021-05-23T16:54:03.711Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)"}}
[debug] [2021-05-23T16:54:03.711Z] 
	at java.lang.Thread.run(Thread.java:748)
Exception in thread "pool-1-thread-88" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\n\tat java.lang.Thread.run(Thread.java:748)\nException in thread \"pool-1-thread-88\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n"}}
[debug] [2021-05-23T16:54:03.712Z] 	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T17:09:03.698Z] May 23, 2021 1:09:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 177
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 1:09:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 177\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T17:09:03.726Z] May 23, 2021 1:09:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 179
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 1:09:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 179\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T17:24:03.758Z] Exception in thread "pool-1-thread-97" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-97\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled"}}
[debug] [2021-05-23T17:24:03.758Z] 
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Exception in thread "pool-1-thread-94" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nException in thread \"pool-1-thread-94\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T17:24:03.759Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T17:24:03.779Z] Exception in thread "pool-1-thread-96" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-96\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T17:24:03.784Z] Exception in thread "pool-1-thread-98" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-98\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n"}}
[debug] [2021-05-23T17:24:03.784Z] 	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T17:39:03.815Z] May 23, 2021 1:39:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 197
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 1:39:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 197\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T17:39:03.820Z] May 23, 2021 1:39:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 199
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 1:39:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 199\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T17:39:03.823Z] May 23, 2021 1:39:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 201
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 1:39:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 201\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T17:39:03.824Z] May 23, 2021 1:39:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 203
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 1:39:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 203\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T17:54:03.805Z] Exception in thread "pool-1-thread-106"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-106\" "}}
[debug] [2021-05-23T17:54:03.808Z] Exception in thread "pool-1-thread-104" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-104\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nio.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T17:54:03.808Z] Exception in thread "pool-1-thread-105" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-105\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T17:54:03.809Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T17:54:03.810Z] Exception in thread "pool-1-thread-108" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-108\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T17:54:03.836Z] Exception in thread "pool-1-thread-107"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-107\" "}}
[debug] [2021-05-23T17:54:03.836Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T18:03:22.105Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T18:03:22.148Z] May 23, 2021 2:03:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 2:03:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T18:03:22.257Z] May 23, 2021 2:03:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 2:03:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-05-23T18:03:22.483Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"8555"}
[warn] ⚠  firestore.rules:17:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:17:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:17:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:17:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:17:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:17:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:70:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:254:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:254:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:254:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:254:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:256:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:256:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:273:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:273:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:275:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:275:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:297:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:297:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:299:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:299:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:299:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:299:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T18:04:06.575Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function hasOnly(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAll(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactly(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T18:04:06.579Z] May 23, 2021 2:04:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 2:04:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T18:04:06.674Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"8555"}
[warn] ⚠  firestore.rules:17:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:17:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:17:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:17:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:17:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:17:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:17:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:70:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:254:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:254:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:254:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:254:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:256:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:256:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:256:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:273:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:273:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:273:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:275:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:275:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:297:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:297:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:299:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:299:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:299:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:299:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T18:09:03.841Z] Exception in thread "pool-1-thread-114" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-114\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T18:09:03.842Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Exception in thread "pool-1-thread-115"  {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nException in thread \"pool-1-thread-115\" "}}
[debug] [2021-05-23T18:09:03.842Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T18:09:03.844Z] Exception in thread "pool-1-thread-116" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-116\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n"}}
[debug] [2021-05-23T18:09:03.844Z] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n"}}
[debug] [2021-05-23T18:09:03.847Z] 	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T18:24:03.869Z] Exception in thread "pool-1-thread-113"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-113\" "}}
[debug] [2021-05-23T18:24:03.871Z] Exception in thread "pool-1-thread-120" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-120\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n"}}
[debug] [2021-05-23T18:24:03.871Z] 	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T18:24:03.872Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T18:24:03.884Z] Exception in thread "pool-1-thread-119"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-119\" "}}
[debug] [2021-05-23T18:24:03.884Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T18:24:03.885Z] Exception in thread "pool-1-thread-117" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-117\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T18:24:03.885Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n"}}
[debug] [2021-05-23T18:24:03.886Z] 	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T18:39:03.887Z] Exception in thread "pool-1-thread-122" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-122\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n"}}
[debug] [2021-05-23T18:39:03.887Z] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T18:39:03.911Z] Exception in thread "pool-1-thread-124"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-124\" "}}
[debug] [2021-05-23T18:39:03.912Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n"}}
[debug] [2021-05-23T18:39:03.913Z] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T18:54:03.942Z] Exception in thread "pool-1-thread-123" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-123\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T19:09:03.925Z] Exception in thread "pool-1-thread-130"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-130\" "}}
[debug] [2021-05-23T19:09:03.929Z] Exception in thread "pool-1-thread-134" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-134\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nio.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T19:09:03.940Z] Exception in thread "pool-1-thread-131" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-131\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T19:09:03.941Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T19:09:03.955Z] Exception in thread "pool-1-thread-125"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-125\" "}}
[debug] [2021-05-23T19:09:03.955Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T19:24:03.917Z] Exception in thread "pool-1-thread-137"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-137\" "}}
[debug] [2021-05-23T19:24:03.922Z] Exception in thread "pool-1-thread-136" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-136\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T19:24:03.924Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T19:24:03.932Z] Exception in thread "pool-1-thread-135" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-135\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n"}}
[debug] [2021-05-23T19:24:03.932Z] 	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n"}}
[debug] [2021-05-23T19:24:03.933Z] 	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T19:24:03.966Z] Exception in thread "pool-1-thread-139" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-139\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T19:24:03.967Z] Exception in thread "pool-1-thread-138" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-138\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T19:24:03.968Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n"}}
[debug] [2021-05-23T19:24:03.968Z] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T19:39:03.957Z] Exception in thread "pool-1-thread-143" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-143\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T19:39:03.961Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T19:39:03.998Z] Exception in thread "pool-1-thread-146"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-146\" "}}
[debug] [2021-05-23T19:39:03.998Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n"}}
[debug] [2021-05-23T19:39:03.999Z] 	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n"}}
[debug] [2021-05-23T19:39:04.000Z] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T19:43:30.304Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function hasOnlyCreate(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(request, resource, fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(request, fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T19:43:30.365Z] May 23, 2021 3:43:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 3:43:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T19:43:30.417Z] May 23, 2021 3:43:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 3:43:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-05-23T19:43:30.682Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"8571"}
[warn] ⚠  firestore.rules:41:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:41:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:41:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:41:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:41:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:41:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:41:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:41:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:82:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:266:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:266:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:266:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:266:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:268:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:268:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:268:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:268:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:285:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:285:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:285:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:285:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:287:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:287:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:287:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:287:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:309:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:309:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:341:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T19:44:00.331Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function hasOnlyCreate(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(request, resource, fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(request, resource, fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n      && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T19:44:00.340Z] May 23, 2021 3:44:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 3:44:00 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T19:44:00.438Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"8571"}
[warn] ⚠  firestore.rules:41:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:41:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:41:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:41:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:41:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:41:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:41:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:41:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:82:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:266:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:266:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:266:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:266:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:268:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:268:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:268:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:268:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:285:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:285:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:285:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:285:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:287:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:287:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:287:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:287:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:309:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:309:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:341:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T19:44:12.754Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function hasOnlyCreate(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(request, resource, fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(request, resource, fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request)\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T19:44:12.759Z] May 23, 2021 3:44:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 3:44:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T19:44:12.856Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"8571"}
[warn] ⚠  firestore.rules:40:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:40:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:40:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:40:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:40:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:40:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:40:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:40:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:81:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:265:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:265:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:265:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:265:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:267:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:267:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:267:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:267:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:284:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:284:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:286:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:286:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:286:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:286:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:308:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:308:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:340:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T19:44:19.030Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function hasOnlyCreate(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(request, resource, fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(request, resource, fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        && request.resource.data.keys().hasAll([\"name\", \"timezone\"])\n        && request.resource.data.keys().hasOnly([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T19:44:19.046Z] May 23, 2021 3:44:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 3:44:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T19:44:19.131Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"8571"}
[warn] ⚠  firestore.rules:40:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:40:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:40:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:40:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:40:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:40:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:40:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:40:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:81:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:265:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:265:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:265:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:265:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:267:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:267:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:267:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:267:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:284:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:284:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:286:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:286:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:286:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:286:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:308:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:308:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:340:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T19:46:52.614Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function hasOnlyCreate(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(request, resource, fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(request, resource, fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T19:46:52.623Z] May 23, 2021 3:46:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 3:46:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T19:46:52.797Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"8571"}
[warn] ⚠  firestore.rules:50:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:50:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:50:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:50:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:50:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:50:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:50:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:50:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:83:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:265:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:265:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:265:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:265:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:267:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:267:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:267:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:267:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:284:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:284:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:286:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:286:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:286:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:286:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:308:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:308:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:340:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T19:46:59.492Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function hasOnlyCreate(request, fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(request, fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(request, resource, fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(request, resource, fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T19:46:59.500Z] May 23, 2021 3:46:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 3:46:59 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T19:46:59.615Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"8571"}
[warn] ⚠  firestore.rules:50:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:50:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:50:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:50:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:50:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:50:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:50:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:50:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:83:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:265:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:265:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:265:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:265:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:267:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:267:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:267:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:267:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:284:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:284:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:286:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:286:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:286:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:286:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:308:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:308:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:340:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T19:48:26.675Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T19:48:26.716Z] May 23, 2021 3:48:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 3:48:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T19:48:26.941Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"8571"}
[warn] ⚠  firestore.rules:50:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:50:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:50:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:50:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:50:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:50:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:50:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:50:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:83:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:265:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:265:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:265:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:265:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:267:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:267:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:267:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:267:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:284:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:284:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:286:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:286:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:286:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:286:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:308:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:308:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:340:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T19:48:50.636Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  function isUser(uid) {\n    return request.auth.uid === uid\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T19:48:50.643Z] May 23, 2021 3:48:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 3:48:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T19:48:50.760Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9038"}
[warn] ⚠  firestore.rules:4:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:54:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:54:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:54:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:54:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:54:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:54:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:54:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:54:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:54:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:87:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:269:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:269:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:269:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:269:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:271:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:271:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:271:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:271:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:288:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:288:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:288:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:288:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:290:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:290:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:290:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:290:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:312:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:312:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:312:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:312:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:314:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:314:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:314:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:314:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:344:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T19:52:17.914Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant === uid\n  }\n\n  function isResearcher(uid) {\n    return request.auth.token.participant === uid\n  }\n\n  // AUTH\n  function\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T19:52:17.939Z] May 23, 2021 3:52:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 3:52:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T19:52:18.168Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9720"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:13:45 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:17:45 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:24:3 - ERROR Unexpected 'function'. 
[warn] ⚠  firestore.rules:70:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:70:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:70:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:70:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:70:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:70:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:70:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:70:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:70:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:103:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:285:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:285:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:285:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:285:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:287:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:287:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:287:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:287:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:304:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:304:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:304:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:304:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:306:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:306:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:306:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:306:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:328:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:328:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:328:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:328:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:330:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:330:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:330:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:330:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:360:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T19:54:03.998Z] May 23, 2021 3:54:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 285
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 3:54:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 285\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:02:41.142Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // FORMATS\n  function date\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:02:41.167Z] May 23, 2021 4:02:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:02:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:02:41.400Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9270"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:24:3 - ERROR Unexpected 'function'. 
[warn] ⚠  firestore.rules:80:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:80:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:80:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:80:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:80:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:80:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:80:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:80:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:80:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:113:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:295:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:295:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:295:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:295:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:297:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:297:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:314:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:314:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:314:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:314:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:316:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:316:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:316:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:316:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:338:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:338:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:338:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:338:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:340:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:340:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:340:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:340:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:370:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:06:48.617Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // FORMATS\n  function date\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:06:48.681Z] May 23, 2021 4:06:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:06:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:06:48.904Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9270"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:24:3 - ERROR Unexpected 'function'. 
[warn] ⚠  firestore.rules:84:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:84:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:84:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:84:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:84:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:84:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:84:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:84:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:84:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:117:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:299:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:299:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:299:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:299:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:301:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:301:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:318:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:318:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:318:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:318:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:320:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:320:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:320:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:320:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:342:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:342:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:342:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:342:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:344:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:344:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:344:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:344:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:374:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:07:30.755Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // FORMATS\n  function date\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:07:30.764Z] May 23, 2021 4:07:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:07:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:07:30.856Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9270"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:24:3 - ERROR Unexpected 'function'. 
[warn] ⚠  firestore.rules:84:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:84:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:84:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:84:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:84:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:84:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:84:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:84:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:84:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:117:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:299:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:299:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:299:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:299:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:301:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:301:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:318:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:318:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:318:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:318:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:320:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:320:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:320:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:320:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:342:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:342:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:342:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:342:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:344:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:344:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:344:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:344:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:374:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:07:34.486Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // FORMATS\n  function date\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:07:34.490Z] May 23, 2021 4:07:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:07:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:07:34.601Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9270"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:24:3 - ERROR Unexpected 'function'. 
[warn] ⚠  firestore.rules:84:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:84:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:84:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:84:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:84:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:84:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:84:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:84:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:84:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:117:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:299:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:299:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:299:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:299:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:301:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:301:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:318:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:318:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:318:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:318:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:320:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:320:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:320:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:320:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:342:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:342:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:342:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:342:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:344:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:344:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:344:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:344:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:374:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:07:49.960Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // FORMATS\n  function date\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:07:49.967Z] May 23, 2021 4:07:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:07:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:07:50.157Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9270"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:24:3 - ERROR Unexpected 'function'. 
[warn] ⚠  firestore.rules:82:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:82:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:82:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:82:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:82:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:82:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:82:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:82:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:82:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:115:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:297:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:297:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:297:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:299:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:299:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:299:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:299:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:316:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:316:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:316:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:316:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:318:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:318:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:318:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:318:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:340:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:340:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:340:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:340:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:342:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:342:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:342:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:342:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:372:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T20:09:03.967Z] Exception in thread "pool-1-thread-145"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-145\" "}}
[debug] [2021-05-23T20:09:03.971Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T20:09:03.973Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n"}}
[debug] [2021-05-23T20:09:03.973Z] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T20:09:03.982Z] Exception in thread "pool-1-thread-151"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-151\" "}}
[debug] [2021-05-23T20:09:03.982Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T20:09:03.983Z] Exception in thread "pool-1-thread-150" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-150\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T20:09:04.013Z] Exception in thread "pool-1-thread-142" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-142\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n"}}
[debug] [2021-05-23T20:09:04.015Z] 	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T20:09:04.017Z] Exception in thread "pool-1-thread-144" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-144\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n"}}
[debug] [2021-05-23T20:09:04.018Z] 	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n"}}
[debug] [2021-05-23T20:09:04.019Z] 	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:10:58.545Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field <= 32503680000000\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:10:58.571Z] May 23, 2021 4:10:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:10:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:10:58.858Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10587"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:43:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:43:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:43:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:43:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:43:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:43:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:43:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:43:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:43:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:88:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:88:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:88:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:88:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:88:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:88:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:121:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:303:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:303:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:303:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:303:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:305:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:305:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:305:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:305:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:322:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:322:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:322:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:322:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:324:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:324:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:346:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:346:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:346:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:346:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:348:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:348:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:348:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:348:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:378:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:11:30.784Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:11:30.814Z] May 23, 2021 4:11:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:11:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:11:30.926Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10587"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:43:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:43:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:43:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:43:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:43:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:43:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:43:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:43:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:43:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:93:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:93:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:93:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:93:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:93:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:93:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:126:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:308:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:308:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:308:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:327:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:327:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:329:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:329:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:351:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:351:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:353:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:353:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:383:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:11:34.369Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isDate(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:11:34.375Z] May 23, 2021 4:11:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:11:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:11:34.472Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10587"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:43:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:43:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:43:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:43:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:43:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:43:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:43:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:43:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:43:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:92:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:92:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:92:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:92:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:92:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:92:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:125:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:307:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:307:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:307:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:307:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:309:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:309:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:326:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:326:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:328:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:328:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:328:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:328:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:350:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:350:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:350:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:350:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:352:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:352:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:352:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:352:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:382:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:12:53.819Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isPositiveInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:12:53.878Z] May 23, 2021 4:12:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:12:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:12:54.014Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9039"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:51:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:51:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:51:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:51:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:51:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:51:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:51:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:51:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:51:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:126:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:308:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:308:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:308:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:327:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:327:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:329:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:329:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:351:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:351:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:353:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:353:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:383:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:13:02.132Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:13:02.137Z] May 23, 2021 4:13:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:13:02 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:13:02.297Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9039"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:51:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:51:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:51:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:51:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:51:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:51:98 - ERROR mismatched input '$' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:51:99 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:51:99 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:51:100 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', ']', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:126:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:308:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:308:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:308:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:327:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:327:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:329:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:329:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:351:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:351:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:353:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:353:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:383:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:15:10.246Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:15:10.251Z] May 23, 2021 4:15:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:15:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:15:10.341Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:51:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:51:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:51:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:51:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:51:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:51:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:51:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:51:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:51:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:51:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:51:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:51:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:126:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:308:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:308:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:308:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:327:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:327:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:329:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:329:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:351:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:351:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:353:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:353:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:383:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:18:20.710Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if request.auth.uid == researcherID\n      allow create: if request.auth.uid == researcherID\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:18:20.716Z] May 23, 2021 4:18:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:18:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:18:20.817Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:130:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:312:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:312:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:312:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:312:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:314:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:314:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:314:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:314:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:331:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:331:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:331:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:331:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:333:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:333:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:355:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:355:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:355:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:355:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:357:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:357:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:357:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:357:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:387:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:18:58.654Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  // function mutableFields(request, fields) {\n\n  // }\n\n  // function immutableFields(request, fields) {\n\n  // }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        // immutable fields\n        && !request.resource.data.diff(resource.data).affectedKeys().hasAny([\"name\"])\n\n        // mutable fields\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:18:58.658Z] May 23, 2021 4:18:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:18:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:18:58.754Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:130:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:312:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:312:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:312:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:312:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:314:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:314:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:314:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:314:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:331:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:331:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:331:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:331:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:333:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:333:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:355:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:355:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:355:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:355:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:357:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:357:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:357:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:357:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:387:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:21:06.352Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        // required field on creation so will definitely exist in document\n        && request.resource.data.timezone is string\n        && request.resource.data.timezone in validTimezoneList()\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:21:06.366Z] May 23, 2021 4:21:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:21:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:21:06.464Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9770"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:122:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:309:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:309:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:309:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:328:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:328:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:328:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:328:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:330:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:330:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:330:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:330:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:352:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:352:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:352:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:352:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:354:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:354:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:354:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:354:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:384:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T20:24:04.007Z] Exception in thread "pool-1-thread-153"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-153\" "}}
[debug] [2021-05-23T20:24:04.009Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n"}}
[debug] [2021-05-23T20:24:04.010Z] 	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T20:24:04.018Z] May 23, 2021 4:24:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 311
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 4:24:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 311\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T20:24:04.024Z] May 23, 2021 4:24:04 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 313
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 4:24:04 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 313\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:25:04.989Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n  function isOnlyFieldChanged(fieldName) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && !\"timezone\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          request.resource.data.timezone != resource.data.timezone\n        )\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:25:04.996Z] May 23, 2021 4:25:04 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:25:04 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:25:05.119Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:135:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:310:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:312:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:312:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:312:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:312:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:329:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:329:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:331:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:331:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:331:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:331:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:353:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:353:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:355:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:355:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:355:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:355:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:385:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:25:16.993Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n  function isOnlyFieldChanged(fieldName) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && isOnlyFieldChanged(\"timezone\")\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:25:17.019Z] May 23, 2021 4:25:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:25:17 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:25:17.146Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:135:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:308:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:308:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:308:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:327:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:327:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:329:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:329:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:351:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:351:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:353:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:353:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:383:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:25:35.560Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n  function isOnlyAffectedFieldChanged(fieldName) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && isOnlyAffectedFieldChanged(\"timezone\")\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:25:35.566Z] May 23, 2021 4:25:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:25:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:25:35.673Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:135:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:308:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:308:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:308:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:327:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:327:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:329:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:329:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:351:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:351:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:353:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:353:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:383:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:25:58.643Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  // function requiredFields(request, fields) {\n\n  // }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:25:58.658Z] May 23, 2021 4:25:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:25:58 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:25:58.749Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:135:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:308:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:308:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:308:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:327:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:327:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:329:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:329:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:351:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:351:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:353:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:353:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:383:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:31:26.594Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  function fieldAffected(request, resource, name) {\n    return name in request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function fieldDifferent(request, resource, name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function fieldChanged(request, resource, name) {\n    return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  }\n\n  function requiredFields(request, fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:31:26.642Z] May 23, 2021 4:31:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:31:26 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:31:26.890Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:135:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:308:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:308:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:308:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:327:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:327:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:329:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:329:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:351:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:351:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:353:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:353:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:383:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:31:37.965Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  // function fieldAffected(request, resource, name) {\n  //   return name in request.resource.data.diff(resource.data).affectedKeys()\n  // }\n\n  // function fieldDifferent(request, resource, name) {\n  //   return request.resource.data[name] != resource.data[name]\n  // }\n\n  // function fieldChanged(request, resource, name) {\n  //   return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  // }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && hasExactlyCreate(request, [\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:31:37.975Z] May 23, 2021 4:31:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:31:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:31:38.175Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:135:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:308:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:308:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:308:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:308:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:327:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:327:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:329:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:329:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:329:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:351:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:351:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:353:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:353:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:353:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:383:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:32:35.466Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  // function fieldAffected(request, resource, name) {\n  //   return name in request.resource.data.diff(resource.data).affectedKeys()\n  // }\n\n  // function fieldDifferent(request, resource, name) {\n  //   return request.resource.data[name] != resource.data[name]\n  // }\n\n  // function fieldChanged(request, resource, name) {\n  //   return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  // }\n\n  function exactFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && hasExactlyCreate([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:32:35.534Z] May 23, 2021 4:32:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:32:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:32:35.914Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:140:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:332:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:332:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:332:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:332:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:334:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:334:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:356:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:356:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:356:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:356:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:358:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:358:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:358:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:358:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:388:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:32:55.214Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  // function fieldAffected(request, resource, name) {\n  //   return name in request.resource.data.diff(resource.data).affectedKeys()\n  // }\n\n  // function fieldDifferent(request, resource, name) {\n  //   return request.resource.data[name] != resource.data[name]\n  // }\n\n  // function fieldChanged(request, resource, name) {\n  //   return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  // }\n\n  function exactFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if request.auth.uid == researcherID\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:32:55.220Z] May 23, 2021 4:32:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:32:55 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:32:55.313Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:140:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:332:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:332:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:332:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:332:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:334:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:334:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:356:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:356:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:356:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:356:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:358:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:358:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:358:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:358:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:388:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:33:14.483Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  // function fieldAffected(request, resource, name) {\n  //   return name in request.resource.data.diff(resource.data).affectedKeys()\n  // }\n\n  // function fieldDifferent(request, resource, name) {\n  //   return request.resource.data[name] != resource.data[name]\n  // }\n\n  // function fieldChanged(request, resource, name) {\n  //   return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  // }\n\n  function exactFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional field so may not exist in document\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if request.auth.uid == researcherID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:33:14.488Z] May 23, 2021 4:33:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:33:14 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:33:14.598Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:140:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:332:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:332:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:332:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:332:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:334:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:334:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:356:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:356:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:356:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:356:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:358:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:358:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:358:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:358:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:388:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:34:30.069Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  // function fieldAffected(request, resource, name) {\n  //   return name in request.resource.data.diff(resource.data).affectedKeys()\n  // }\n\n  // function fieldDifferent(request, resource, name) {\n  //   return request.resource.data[name] != resource.data[name]\n  // }\n\n  // function fieldChanged(request, resource, name) {\n  //   return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  // }\n\n  function exactFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == researcherID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if request.auth.uid == participantID\n        allow update: if updateNotifications(request, resource, researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:34:30.075Z] May 23, 2021 4:34:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:34:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:34:30.179Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:140:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:332:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:332:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:332:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:332:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:334:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:334:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:356:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:356:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:356:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:356:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:358:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:358:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:358:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:358:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:388:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:34:44.841Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  // function fieldAffected(request, resource, name) {\n  //   return name in request.resource.data.diff(resource.data).affectedKeys()\n  // }\n\n  // function fieldDifferent(request, resource, name) {\n  //   return request.resource.data[name] != resource.data[name]\n  // }\n\n  // function fieldChanged(request, resource, name) {\n  //   return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  // }\n\n  function exactFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if request.auth.uid == participantID\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:34:44.849Z] May 23, 2021 4:34:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:34:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:34:44.941Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:140:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:332:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:332:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:332:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:332:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:334:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:334:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:356:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:356:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:356:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:356:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:358:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:358:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:358:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:358:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:388:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:34:57.800Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function hasOnlyCreate(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function hasAllCreate(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function hasExactlyCreate(fields) {\n    return hasAll(request, fields) && hasOnly(request, fields)\n  }\n\n  function hasOnlyUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function hasAllUpdate(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasAll(fields)\n  }\n\n  function hasExactlyUpdate(request, resource, fields) {\n    return hasAll(request, resource, fields) && hasOnly(request, resource, fields)\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate(resource, request, [\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  // function fieldAffected(request, resource, name) {\n  //   return name in request.resource.data.diff(resource.data).affectedKeys()\n  // }\n\n  // function fieldDifferent(request, resource, name) {\n  //   return request.resource.data[name] != resource.data[name]\n  // }\n\n  // function fieldChanged(request, resource, name) {\n  //   return fieldAffected(request.resource.data, name) == false || fieldDifferent(request, resource, name)\n  // }\n\n  function exactFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:34:57.811Z] May 23, 2021 4:34:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:34:57 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:34:57.943Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:140:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:332:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:332:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:332:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:332:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:334:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:334:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:356:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:356:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:356:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:356:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:358:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:358:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:358:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:358:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:388:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:36:05.754Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n  function exactFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:36:05.759Z] May 23, 2021 4:36:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:36:05 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:36:05.845Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:103:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:276:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:276:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:276:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:276:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:278:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:278:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:278:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:278:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:295:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:295:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:295:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:295:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:297:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:297:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:319:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:319:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:319:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:319:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:321:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:321:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:321:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:321:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:351:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:36:26.929Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updateNotifications(request, resource, userID) {\n    // only allow read attribute to be changed from false to true\n    return request.auth.uid == userID\n      && hasExactlyUpdate([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  function exactFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  // // document updation\n  function mutableFields(fields) {\n    return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)\n  }\n\n  function immutableFields(request, fields) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !request.resource.data.diff(resource.data).affectedKeys().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:36:27.004Z] May 23, 2021 4:36:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:36:27 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:36:27.132Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9768"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:104:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:277:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:277:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:277:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:277:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:279:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:279:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:279:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:279:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:296:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:296:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:298:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:298:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:298:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:298:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:320:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:320:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:320:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:320:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:322:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:322:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:322:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:322:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:352:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T20:39:03.975Z] Exception in thread "pool-1-thread-154" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-154\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T20:39:03.987Z] May 23, 2021 4:39:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 317
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 4:39:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 317\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T20:39:03.996Z] May 23, 2021 4:39:03 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 319
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 4:39:03 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 319\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T20:39:04.025Z] Exception in thread "pool-1-thread-162" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-162\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T20:39:04.025Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n"}}
[debug] [2021-05-23T20:39:04.029Z] 	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T20:39:04.055Z] Exception in thread "pool-1-thread-157" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-157\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n"}}
[debug] [2021-05-23T20:39:04.055Z] 	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:40:25.416Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !updatedFields().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && exactFields([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in request.resource.data.diff(resource.data).affectedKeys() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:40:25.439Z] May 23, 2021 4:40:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:40:25 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:40:25.661Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10000"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:68:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:106:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:279:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:279:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:279:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:279:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:281:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:281:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:281:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:281:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:298:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:298:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:298:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:298:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:300:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:300:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:300:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:300:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:322:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:322:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:322:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:322:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:324:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:324:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:354:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:41:42.112Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !updatedFields().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && exactFields([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        // request data should contain exactly the following fields\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:41:42.118Z] May 23, 2021 4:41:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:41:42 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:41:42.255Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10000"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:68:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:106:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:279:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:279:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:279:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:279:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:281:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:281:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:281:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:281:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:298:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:298:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:298:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:298:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:300:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:300:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:300:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:300:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:322:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:322:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:322:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:322:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:324:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:324:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:354:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:43:44.422Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !updatedFields().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && exactFields([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:43:44.428Z] May 23, 2021 4:43:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:43:44 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:43:44.529Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10234"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:68:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:94:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:110:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:282:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:282:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:282:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:282:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:284:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:284:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:301:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:301:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:303:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:303:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:303:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:303:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:325:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:325:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:325:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:325:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:327:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:327:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:357:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:43:48.484Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !updatedFields().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && exactFields([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if request.auth.uid == resource.data.researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:43:48.489Z] May 23, 2021 4:43:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:43:48 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:43:48.578Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10234"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:68:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:95:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:111:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:283:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:283:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:283:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:283:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:285:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:285:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:285:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:285:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:302:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:302:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:304:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:304:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:304:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:304:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:326:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:326:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:328:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:328:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:328:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:328:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:358:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:45:09.186Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !updatedFields().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && exactFields([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if request.auth.uid == participantID\n          || request.auth.uid == getStudyData(studyID).researcher.id\n\n        allow create: if participantID == request.auth.uid\n          && request.resource.data.keys().hasAll([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.keys().hasOnly([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:45:09.195Z] May 23, 2021 4:45:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:45:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:45:09.296Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10234"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:68:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:95:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:111:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:283:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:283:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:283:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:283:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:285:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:285:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:285:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:285:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:302:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:302:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:304:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:304:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:304:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:304:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:326:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:326:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:328:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:328:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:328:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:328:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:358:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:45:50.597Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !updatedFields().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && exactFields([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID)\n          || isAuthenticated(getStudyData(studyID).researcher.id)\n\n        allow create: if participantID == request.auth.uid\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:45:50.600Z] May 23, 2021 4:45:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:45:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:45:50.725Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10234"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:68:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:95:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:111:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:282:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:282:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:282:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:282:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:284:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:284:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:301:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:301:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:303:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:303:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:303:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:303:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:325:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:325:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:325:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:325:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:327:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:327:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:357:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:45:53.007Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !updatedFields().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && exactFields([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyData(studyID).researcher.id)\n\n        allow create: if participantID == request.auth.uid\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:45:53.014Z] May 23, 2021 4:45:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:45:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:45:53.098Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10234"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:68:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:95:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:111:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:281:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:281:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:281:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:281:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:283:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:283:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:283:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:283:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:300:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:300:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:300:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:300:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:302:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:302:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:324:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:324:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:326:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:326:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:356:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:46:10.795Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !updatedFields().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && exactFields([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if participantID == request.auth.uid\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:46:10.853Z] May 23, 2021 4:46:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:46:10 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:46:11.033Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10234"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:68:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:95:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:111:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:281:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:281:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:281:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:281:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:283:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:283:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:283:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:283:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:300:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:300:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:300:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:300:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:302:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:302:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:324:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:324:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:326:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:326:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:356:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:46:24.151Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !updatedFields().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && exactFields([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if participantID == request.auth.uid\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n\n    function getStudyResearcherID() {\n      return getStudyData(studyID).researcher.id\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:46:24.156Z] May 23, 2021 4:46:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:46:24 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:46:24.244Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10234"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:68:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:95:3 - ERROR Missing 'function' body 
[warn] ⚠  firestore.rules:111:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:281:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:281:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:281:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:281:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:283:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:283:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:283:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:283:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:300:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:300:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:300:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:300:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:302:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:302:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:324:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:324:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:326:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:326:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:360:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:48:52.005Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    updatedFields().hasOnly([fieldName])\n      && updatedFields().hasAll([fieldName])\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !updatedFields().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n\n    function getStudyResearcherID() {\n      return getStudyData(studyID).researcher.id\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:48:52.026Z] May 23, 2021 4:48:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:48:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:48:52.141Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10238"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:68:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:94:5 - ERROR Unexpected 'updatedFields'. 
[warn] ⚠  firestore.rules:112:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:282:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:282:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:282:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:282:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:284:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:284:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:301:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:301:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:303:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:303:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:303:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:303:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:325:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:325:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:325:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:325:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:327:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:327:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:361:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:48:54.728Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    return updatedFields().hasOnly([fieldName])\n      && updatedFields().hasAll([fieldName])\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !updatedFields().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"status\"])\n          && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"status\"])\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n\n    function getStudyResearcherID() {\n      return getStudyData(studyID).researcher.id\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:48:54.733Z] May 23, 2021 4:48:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:48:54 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:48:54.816Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10000"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:68:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:112:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:282:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:282:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:282:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:282:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:284:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:284:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:284:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:301:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:301:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:303:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:303:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:303:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:303:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:325:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:325:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:325:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:325:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:327:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:327:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:327:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:361:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:50:16.665Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    return updatedFields().hasOnly([fieldName])\n      && updatedFields().hasAll([fieldName])\n  }\n\n  function hasLoneAffectedFieldChanged(fieldName) {\n    return !updatedFields().hasOnly([fieldName])\n      || request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && hasLoneAffectedFieldChanged(\"timezone\")\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n\n    function getStudyResearcherID() {\n      return getStudyData(studyID).researcher.id\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:50:16.675Z] May 23, 2021 4:50:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:50:16 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:50:16.761Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10000"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:68:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:112:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:281:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:281:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:281:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:281:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:283:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:283:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:283:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:283:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:300:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:300:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:300:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:300:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:302:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:302:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:324:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:324:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:326:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:326:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:360:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:51:41.937Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    return updatedFields().hasOnly([fieldName])\n      && updatedFields().hasAll([fieldName])\n  }\n\n  function hasFieldChanged(fieldName) {\n    request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n\n    function getStudyResearcherID() {\n      return getStudyData(studyID).researcher.id\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:51:41.968Z] May 23, 2021 4:51:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:51:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:51:42.078Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10232"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:68:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:99:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:111:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:280:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:280:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:280:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:280:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:282:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:282:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:282:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:282:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:299:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:299:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:299:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:299:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:301:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:301:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:301:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:323:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:323:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:323:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:323:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:325:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:325:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:325:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:325:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:359:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T20:54:03.994Z] Exception in thread "pool-1-thread-164"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-164\" "}}
[debug] [2021-05-23T20:54:03.995Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n"}}
[debug] [2021-05-23T20:54:03.996Z] 	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T20:54:03.998Z] Exception in thread "pool-1-thread-161" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-161\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n"}}
[debug] [2021-05-23T20:54:03.998Z] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T20:54:04.002Z] Exception in thread "pool-1-thread-163" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-163\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n"}}
[debug] [2021-05-23T20:54:04.005Z] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n"}}
[debug] [2021-05-23T20:54:04.008Z] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T20:54:04.011Z] Exception in thread "pool-1-thread-165" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-165\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n"}}
[debug] [2021-05-23T20:54:04.013Z] 	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:56:47.347Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    return timestamp % millisecondsInThirtyMinutes()\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    return field is int && 0 <= field <= millisecondsInOneWeek()\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    return updatedFields().hasOnly([fieldName])\n      && updatedFields().hasAll([fieldName])\n  }\n\n  function hasFieldChanged(fieldName) {\n    request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n\n    function getStudyResearcherID() {\n      return getStudyData(studyID).researcher.id\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:56:47.355Z] May 23, 2021 4:56:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:56:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:56:47.438Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10232"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:68:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:99:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:111:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:281:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:281:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:281:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:281:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:283:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:283:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:283:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:283:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:300:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:300:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:300:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:300:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:302:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:302:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:324:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:324:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:324:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:326:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:326:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:360:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:58:30.609Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function millisecondsInOneWeek() {\n    return 604800000\n  }\n\n  function millisecondsInThirtyMinutes() {\n    return 1800000\n  }\n\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    // 1800000 = milliseconds in 30 minutes\n    return timestamp % 1800000\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    // 604800000 = milliseconds in one week\n    return field is int && 0 <= field <= 604800000\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    return updatedFields().hasOnly([fieldName])\n      && updatedFields().hasAll([fieldName])\n  }\n\n  function hasFieldChanged(fieldName) {\n    request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n\n    function getStudyResearcherID() {\n      return getStudyData(studyID).researcher.id\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:58:30.614Z] May 23, 2021 4:58:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:58:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:58:30.696Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10233"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:56:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:56:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:56:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:56:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:56:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:56:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:56:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:56:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:56:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:56:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:56:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:56:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:70:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:101:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:113:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:283:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:283:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:283:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:283:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:285:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:285:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:285:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:285:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:302:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:302:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:302:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:304:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:304:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:304:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:304:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:326:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:326:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:326:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:328:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:328:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:328:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:328:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:362:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:58:38.297Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    // 1800000 = milliseconds in 30 minutes\n    return timestamp % 1800000\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isTimestampFormat(field) {\n    // check if timestamp value is between epoch of 2000-01-01 and 3000-01-01 in milliseconds\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isWeeklyOffset(field) {\n    // 604800000 = milliseconds in one week\n    return field is int && 0 <= field <= 604800000\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    return updatedFields().hasOnly([fieldName])\n      && updatedFields().hasAll([fieldName])\n  }\n\n  function hasFieldChanged(fieldName) {\n    request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n\n    function getStudyResearcherID() {\n      return getStudyData(studyID).researcher.id\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:58:38.304Z] May 23, 2021 4:58:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:58:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:58:38.398Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10232"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:48:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:48:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:48:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:48:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:48:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:48:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:48:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:48:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:48:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:48:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:48:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:48:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:62:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:93:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:105:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:275:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:275:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:275:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:275:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:277:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:277:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:277:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:277:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:296:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:296:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:318:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:318:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:318:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:318:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:320:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:320:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:320:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:320:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:354:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T20:59:31.465Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isDivisibleByThirtyMinutes(timestamp) {\n    // 1800000 = milliseconds in 30 minutes\n    return timestamp % 1800000\n  }\n\n  function isTimestampFormat(field) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isDateFormat(field) {\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isWeeklyOffset(field) {\n    // 604800000 = milliseconds in one week\n    return field is int && 0 <= field <= 604800000\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    return updatedFields().hasOnly([fieldName])\n      && updatedFields().hasAll([fieldName])\n  }\n\n  function hasFieldChanged(fieldName) {\n    request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n\n    function getStudyResearcherID() {\n      return getStudyData(studyID).researcher.id\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T20:59:31.472Z] May 23, 2021 4:59:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 4:59:31 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T20:59:31.574Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10232"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:54:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:54:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:54:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:54:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:54:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:54:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:54:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:54:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:54:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:54:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:54:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:54:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:63:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:94:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:106:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:276:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:276:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:276:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:276:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:278:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:278:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:278:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:278:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:295:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:295:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:295:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:295:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:297:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:297:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:319:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:319:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:319:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:319:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:321:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:321:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:321:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:321:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:355:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:00:21.468Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isDateFormat(field) {\n    // meets YYYY-MM-DD format\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(timestamp) {\n    // 1800000 = milliseconds in 30 minutes\n    return timestamp % 1800000\n  }\n\n  function isWeeklyOffset(field) {\n    // 604800000 = milliseconds in one week\n    return field is int && 0 <= field <= 604800000\n  }\n\n  function isTimestampFormat(field) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    return updatedFields().hasOnly([fieldName])\n      && updatedFields().hasAll([fieldName])\n  }\n\n  function hasFieldChanged(fieldName) {\n    request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n\n    // fetch a study from firestore by studyID\n    function getStudyData(studyID) {\n    \treturn get(/databases/$(database)/documents/studies/$(studyID)).data\n    }\n\n    function getStudyResearcherID() {\n      return getStudyData(studyID).researcher.id\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:00:21.471Z] May 23, 2021 5:00:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:00:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:00:21.566Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10232"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:44:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:44:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:44:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:44:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:44:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:44:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:44:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:44:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:44:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:44:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:44:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:44:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:65:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:96:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:108:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:278:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:278:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:278:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:278:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:280:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:280:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:280:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:280:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:297:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:297:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:299:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:299:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:299:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:299:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:321:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:321:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:321:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:321:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:323:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:323:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:323:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:323:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:357:3 - ERROR Unexpected '}'. 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:01:52.235Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID() {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isDateFormat(field) {\n    // meets YYYY-MM-DD format\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(timestamp) {\n    // 1800000 = milliseconds in 30 minutes\n    return timestamp % 1800000\n  }\n\n  function isWeeklyOffset(field) {\n    // 604800000 = milliseconds in one week\n    return field is int && 0 <= field <= 604800000\n  }\n\n  function isTimestampFormat(field) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    return updatedFields().hasOnly([fieldName])\n      && updatedFields().hasAll([fieldName])\n  }\n\n  function hasFieldChanged(fieldName) {\n    request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:01:52.243Z] May 23, 2021 5:01:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:01:52 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:01:52.371Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10004"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:75:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:106:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:118:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:288:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:288:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:288:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:288:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:290:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:290:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:290:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:290:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:307:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:307:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:307:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:307:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:309:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:309:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:331:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:331:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:331:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:331:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:333:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:333:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:01:56.737Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID() {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isDateFormat(field) {\n    // meets YYYY-MM-DD format\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(timestamp) {\n    // 1800000 = milliseconds in 30 minutes\n    return timestamp % 1800000\n  }\n\n  function isWeeklyOffset(field) {\n    // 604800000 = milliseconds in one week\n    return field is int && 0 <= field <= 604800000\n  }\n\n  function isTimestampFormat(field) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function updatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function exactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function requiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  // function optionalFields() {\n\n  // }\n\n  function mutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function immutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    return updatedFields().hasOnly([fieldName])\n      && updatedFields().hasAll([fieldName])\n  }\n\n  function hasFieldChanged(fieldName) {\n    request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:01:56.743Z] May 23, 2021 5:01:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:01:56 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:01:56.871Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10004"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:75:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:106:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:118:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:288:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:288:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:288:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:288:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:290:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:290:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:290:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:290:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:307:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:307:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:307:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:307:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:309:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:309:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:331:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:331:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:331:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:331:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:333:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:333:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:04:39.568Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID() {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isDateFormat(field) {\n    // meets YYYY-MM-DD format\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(timestamp) {\n    // 1800000 = milliseconds in 30 minutes\n    return timestamp % 1800000\n  }\n\n  function isWeeklyOffset(field) {\n    // 604800000 = milliseconds in one week\n    return field is int && 0 <= field <= 604800000\n  }\n\n  function isTimestampFormat(field) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function assertExactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function assertRequiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function assertScopedFields(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function assertMutableFields(fields) {\n    return updatedFields().hasOnly(fields)\n  }\n\n  function assertImmutableFields(fields) {\n    return !updatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    return updatedFields().hasOnly([fieldName])\n      && updatedFields().hasAll([fieldName])\n  }\n\n  function hasFieldChanged(fieldName) {\n    request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && updatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in updatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in updatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:04:39.607Z] May 23, 2021 5:04:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:04:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:04:39.844Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10004"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:75:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:106:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:118:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:288:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:288:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:288:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:288:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:290:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:290:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:290:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:290:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:307:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:307:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:307:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:307:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:309:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:309:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:331:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:331:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:331:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:331:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:333:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:333:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:05:07.820Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID() {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isDateFormat(field) {\n    // meets YYYY-MM-DD format\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(timestamp) {\n    // 1800000 = milliseconds in 30 minutes\n    return timestamp % 1800000\n  }\n\n  function isWeeklyOffset(field) {\n    // 604800000 = milliseconds in one week\n    return field is int && 0 <= field <= 604800000\n  }\n\n  function isTimestampFormat(field) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function assertExactFields(fields) {\n    // request data should contain exactly the following fields\n    return request.resource.data.keys().hasAll(fields)\n      && request.resource.data.keys().hasOnly(fields)\n  }\n\n  function assertRequiredFields(fields) {\n    return request.resource.data.keys().hasAll(fields)\n  }\n\n  function assertScopedFields(fields) {\n    return request.resource.data.keys().hasOnly(fields)\n  }\n\n  function assertMutableFields(fields) {\n    return getUpdatedFields().hasOnly(fields)\n  }\n\n  function assertImmutableFields(fields) {\n    return !getUpdatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    return getUpdatedFields().hasOnly([fieldName])\n      && getUpdatedFields().hasAll([fieldName])\n  }\n\n  function hasFieldChanged(fieldName) {\n    request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:05:07.824Z] May 23, 2021 5:05:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:05:07 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:05:07.924Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"10004"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:75:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:106:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:118:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:288:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:288:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:288:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:288:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:290:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:290:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:290:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:290:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:307:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:307:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:307:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:307:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:309:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:309:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:331:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:331:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:331:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:331:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:333:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:333:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:06:04.754Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID() {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(field) {\n    return field is string && field.size() > 0\n  }\n\n  function isNonEmptyList(field) {\n    return field is list && field.size() > 0\n  }\n\n  function isNonNegativeInt(field) {\n    return field is int && field >= 0\n  }\n\n  function isDateFormat(field) {\n    // meets YYYY-MM-DD format\n    return field is string && field.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(timestamp) {\n    // 1800000 = milliseconds in 30 minutes\n    return timestamp % 1800000\n  }\n\n  function isWeeklyOffset(field) {\n    // 604800000 = milliseconds in one week\n    return field is int && 0 <= field <= 604800000\n  }\n\n  function isTimestampFormat(field) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return field is int && 946684800000 <= field && field <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n\n  function assertRequiredFields(fields) {\n    return getCombinedFields().hasAll(fields)\n  }\n\n  function assertScopedFields(fields) {\n    return getCombinedFields().hasOnly(fields)\n  }\n\n  function assertExactFields(fields) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(fields) && assertScopedFields(fields)\n  }\n\n  function assertMutableFields(fields) {\n    return getUpdatedFields().hasOnly(fields)\n  }\n\n  function assertImmutableFields(fields) {\n    return !getUpdatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    return getUpdatedFields().hasOnly([fieldName])\n      && getUpdatedFields().hasAll([fieldName])\n  }\n\n  function hasFieldChanged(fieldName) {\n    request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:06:04.760Z] May 23, 2021 5:06:04 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:06:04 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:06:04.915Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9772"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:110:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:122:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:292:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:292:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:292:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:292:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:335:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:335:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:06:50.708Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID() {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(timestamp) {\n    // 1800000 = milliseconds in 30 minutes\n    return timestamp % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n\n  function assertRequiredFields(fields) {\n    return getCombinedFields().hasAll(fields)\n  }\n\n  function assertScopedFields(fields) {\n    return getCombinedFields().hasOnly(fields)\n  }\n\n  function assertExactFields(fields) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(fields) && assertScopedFields(fields)\n  }\n\n  function assertMutableFields(fields) {\n    return getUpdatedFields().hasOnly(fields)\n  }\n\n  function assertImmutableFields(fields) {\n    return !getUpdatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(fieldName) {\n    return getUpdatedFields().hasOnly([fieldName])\n      && getUpdatedFields().hasAll([fieldName])\n  }\n\n  function hasFieldChanged(fieldName) {\n    request.resource.data[fieldName] != resource.data[fieldName]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:06:50.725Z] May 23, 2021 5:06:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:06:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:06:50.836Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9772"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:110:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:122:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:292:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:292:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:292:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:292:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:335:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:335:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:07:06.861Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID() {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(timestamp) {\n    // 1800000 = milliseconds in 30 minutes\n    return timestamp % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n\n  function assertRequiredFields(fields) {\n    return getCombinedFields().hasAll(fields)\n  }\n\n  function assertScopedFields(fields) {\n    return getCombinedFields().hasOnly(fields)\n  }\n\n  function assertExactFields(fields) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(fields) && assertScopedFields(fields)\n  }\n\n  function assertMutableFields(fields) {\n    return getUpdatedFields().hasOnly(fields)\n  }\n\n  function assertImmutableFields(fields) {\n    return !getUpdatedFields().hasAny(fields)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name])\n      && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    request.resource.data[name] != resource.data[name]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:07:06.867Z] May 23, 2021 5:07:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:07:06 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:07:06.945Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9772"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:110:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:122:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:292:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:292:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:292:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:292:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:335:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:335:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:07:21.011Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID() {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(timestamp) {\n    // 1800000 = milliseconds in 30 minutes\n    return timestamp % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name])\n      && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    request.resource.data[name] != resource.data[name]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:07:21.034Z] May 23, 2021 5:07:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:07:21 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:07:21.122Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9772"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:110:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:122:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:292:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:292:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:292:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:292:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:335:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:335:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T21:09:04.038Z] May 23, 2021 5:09:04 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 339
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 5:09:04 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 339\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T21:09:04.047Z] May 23, 2021 5:09:04 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 337
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 5:09:04 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 337\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T21:09:04.079Z] May 23, 2021 5:09:04 PM io.grpc.netty.NettyServerHandler onStreamError
WARNING: Stream Error
io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 343
	at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)
	at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)
	at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)
	at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

 {"metadata":{"emulator":{"name":"pubsub"},"message":"May 23, 2021 5:09:04 PM io.grpc.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 343\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:129)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.shouldIgnoreHeadersOrDataFrame(DefaultHttp2ConnectionDecoder.java:531)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:183)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41)\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.gapi.emulators.netty.HttpVersionRoutingHandler.channelRead(HttpVersionRoutingHandler.java:99)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:677)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:612)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:529)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:491)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\n"}}
[debug] [2021-05-23T21:24:04.045Z] Exception in thread "pool-1-thread-172"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-172\" "}}
[debug] [2021-05-23T21:24:04.048Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T21:24:04.068Z] Exception in thread "pool-1-thread-170" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-170\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n"}}
[debug] [2021-05-23T21:24:04.068Z] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T21:24:04.072Z] Exception in thread "pool-1-thread-169" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-169\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)"}}
[debug] [2021-05-23T21:24:04.080Z] 
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T21:24:04.092Z] Exception in thread "pool-1-thread-168" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-168\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n"}}
[debug] [2021-05-23T21:24:04.093Z] 	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T21:24:04.114Z] Exception in thread "pool-1-thread-171" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-171\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T21:24:04.114Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n"}}
[debug] [2021-05-23T21:24:04.114Z] 	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n"}}
[debug] [2021-05-23T21:24:04.115Z] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n"}}
[debug] [2021-05-23T21:24:04.115Z] 	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T21:39:04.075Z] Exception in thread "pool-1-thread-178" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-178\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T21:39:04.085Z] Exception in thread "pool-1-thread-179" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-179\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T21:39:04.085Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T21:39:04.095Z] Exception in thread "pool-1-thread-177" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-177\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:46:22.448Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(timestamp) {\n    // 1800000 = milliseconds in 30 minutes\n    return timestamp % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name])\n      && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    request.resource.data[name] != resource.data[name]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:46:22.476Z] May 23, 2021 5:46:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:46:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:46:22.533Z] May 23, 2021 5:46:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:46:22 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:46:22.835Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9772"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:110:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:122:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:292:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:292:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:292:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:292:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:335:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:335:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:46:34.814Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name])\n      && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    request.resource.data[name] != resource.data[name]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:46:34.828Z] May 23, 2021 5:46:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:46:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:46:34.980Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9772"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:110:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:122:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:292:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:292:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:292:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:292:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:335:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:335:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:47:15.892Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    request.resource.data[name] != resource.data[name]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:47:15.899Z] May 23, 2021 5:47:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:47:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:47:15.991Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9772"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:109:5 - ERROR Unexpected 'request'. 
[warn] ⚠  firestore.rules:121:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:291:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:291:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:291:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:291:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:293:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:293:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:293:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:293:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:312:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:312:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:312:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:312:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:334:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:334:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:336:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:336:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:336:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:336:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:48:08.174Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:48:08.200Z] May 23, 2021 5:48:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:48:08 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:48:08.289Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:121:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:291:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:291:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:291:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:291:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:293:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:293:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:293:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:293:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:310:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:310:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:310:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:312:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:312:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:312:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:312:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:334:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:334:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:334:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:336:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:336:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:336:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:336:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:50:03.453Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:50:03.469Z] May 23, 2021 5:50:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:50:03 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:50:03.605Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:120:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:290:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:290:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:290:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:290:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:292:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:292:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:292:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:292:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:309:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:309:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:333:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:333:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:335:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:335:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:51:36.993Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && assertMutableFields([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && exactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:51:36.999Z] May 23, 2021 5:51:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:51:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:51:37.109Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:124:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:294:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:296:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:296:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:339:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:339:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:52:18.358Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && assertMutableFields([\"read\"])\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && immutableFields([\"name\"])\n        && mutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:52:18.363Z] May 23, 2021 5:52:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:52:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:52:18.463Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:124:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:294:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:296:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:296:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:339:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:339:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:53:35.650Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function updateNotifications(userID) {\n    // only allow read attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:53:35.655Z] May 23, 2021 5:53:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:53:35 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:53:35.755Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:124:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:294:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:296:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:296:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:339:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:339:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:53:46.471Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function updateNotifications(userID) {\n    // only allow \"read\" attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:53:46.495Z] May 23, 2021 5:53:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:53:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:53:46.570Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function updateNotifications(userID) {\n    // only allow \"read\" attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:53:46.575Z] May 23, 2021 5:53:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:53:46 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:53:46.617Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:124:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:294:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:296:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:296:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:339:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:339:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T21:53:46.679Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:124:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:294:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:296:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:296:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:339:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:339:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:53:53.405Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function updateNotifications(userID) {\n    // only allow \"read\" attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:53:53.409Z] May 23, 2021 5:53:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:53:53 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:53:53.511Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:120:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:290:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:290:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:290:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:290:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:292:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:292:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:292:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:292:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:309:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:309:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:309:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:333:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:333:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:333:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:335:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:335:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T21:54:04.087Z] Exception in thread "pool-1-thread-189"  {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-189\" "}}
[debug] [2021-05-23T21:54:04.090Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n"}}
[debug] [2021-05-23T21:54:04.091Z] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T21:54:04.097Z] Exception in thread "pool-1-thread-185" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-185\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n"}}
[debug] [2021-05-23T21:54:04.100Z] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T21:54:04.101Z] Exception in thread "pool-1-thread-186" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-186\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[debug] [2021-05-23T21:54:04.101Z] Exception in thread "pool-1-thread-187" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
	at io.grpc.Status.asRuntimeException(Status.java:523)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"Exception in thread \"pool-1-thread-187\" io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\n"}}
[debug] [2021-05-23T21:54:04.102Z] 	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n"}}
[debug] [2021-05-23T21:54:04.102Z] 	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n"}}
[debug] [2021-05-23T21:54:04.102Z] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Exception in thread "pool-1-thread-181"  {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\nException in thread \"pool-1-thread-181\" "}}
[debug] [2021-05-23T21:54:04.103Z] io.grpc.StatusRuntimeException: CANCELLED: call already cancelled
 {"metadata":{"emulator":{"name":"pubsub"},"message":"io.grpc.StatusRuntimeException: CANCELLED: call already cancelled\n"}}
[debug] [2021-05-23T21:54:04.103Z] 	at io.grpc.Status.asRuntimeException(Status.java:523)
	at io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)
	at com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
 {"metadata":{"emulator":{"name":"pubsub"},"message":"\tat io.grpc.Status.asRuntimeException(Status.java:523)\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onCompleted(ServerCalls.java:360)\n\tat com.google.cloud.pubsub.testing.v1.FakePubsubServer$StreamingPullPusher.run(FakePubsubServer.java:1183)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:54:34.505Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function hasFieldChangedFromTo(name, from, to) {\n    return resource.data.read == from && request.resource.data.read == to\n  }\n\n  function updateNotifications(userID) {\n    // only allow \"read\" attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:54:34.510Z] May 23, 2021 5:54:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:54:34 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:54:34.639Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:124:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:294:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:296:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:296:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:339:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:339:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:54:43.453Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return request.resource.data[name] != resource.data[name]\n  }\n\n  function hasFieldChangedFromTo(name, from, to) {\n    return resource.data[name] == from && request.resource.data[name] == to\n  }\n\n  function updateNotifications(userID) {\n    // only allow \"read\" attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:54:43.461Z] May 23, 2021 5:54:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:54:43 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:54:43.554Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:124:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:294:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:296:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:296:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:339:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:339:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:55:09.352Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return resource.data[name] != request.resource.data[name]\n  }\n\n  function hasFieldChangedFromTo(name, from, to) {\n    return resource.data[name] == from && request.resource.data[name] == to\n  }\n\n  function updateNotifications(userID) {\n    // only allow \"read\" attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:55:09.359Z] May 23, 2021 5:55:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:55:09 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:55:09.453Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:124:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:294:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:296:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:296:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:339:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:339:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:55:15.713Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return resource.data[name] != request.resource.data[name]\n  }\n\n  function hasFieldChangedFromTo(name, from, to) {\n    return resource.data[name] == from\n      && request.resource.data[name] == to\n  }\n\n  function updateNotifications(userID) {\n    // only allow \"read\" attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:55:15.717Z] May 23, 2021 5:55:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:55:15 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:55:15.800Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:125:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:295:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:295:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:295:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:295:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:297:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:297:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:297:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:314:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:314:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:314:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:314:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:316:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:316:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:316:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:316:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:338:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:338:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:338:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:338:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:340:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:340:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:340:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:340:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:55:19.942Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return resource.data[name] != request.resource.data[name]\n  }\n\n  function hasFieldChangedFromTo(name, from, to) {\n    return resource.data[name] == from && request.resource.data[name] == to\n  }\n\n  function updateNotifications(userID) {\n    // only allow \"read\" attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:55:19.957Z] May 23, 2021 5:55:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:55:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:55:20.040Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return resource.data[name] != request.resource.data[name]\n  }\n\n  function hasFieldChangedFromTo(name, from, to) {\n    return resource.data[name] == from && request.resource.data[name] == to\n  }\n\n  function updateNotifications(userID) {\n    // only allow \"read\" attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && resource.data.read == false // current value is false\n      && request.resource.data.read == true // updated value is true\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:55:20.046Z] May 23, 2021 5:55:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:55:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:55:20.074Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:124:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:294:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:296:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:296:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:339:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:339:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T21:55:20.147Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:124:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:294:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:296:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:296:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:296:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:315:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:315:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:315:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:339:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:339:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:339:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:55:38.283Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return resource.data[name] != request.resource.data[name]\n  }\n\n  function hasFieldChangedFromTo(name, from, to) {\n    return resource.data[name] == from && request.resource.data[name] == to\n  }\n\n  function updateNotifications(userID) {\n    // only allow \"read\" attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && hasFieldChangedFromTo(\"read\", false, true)\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && request.resource.data.keys().hasAll([\"title\", \"body\"])\n            && request.resource.data.keys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:55:38.290Z] May 23, 2021 5:55:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:55:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:55:38.399Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:123:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:293:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:293:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:293:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:293:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:295:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:295:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:295:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:295:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:312:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:312:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:312:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:312:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:314:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:314:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:314:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:314:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:336:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:336:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:336:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:336:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:338:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:338:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:338:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:338:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:56:18.536Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return resource.data[name] != request.resource.data[name]\n  }\n\n  function hasFieldChangedFromTo(name, from, to) {\n    return resource.data[name] == from && request.resource.data[name] == to\n  }\n\n  function updateNotifications(userID) {\n    // only allow \"read\" attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && hasFieldChangedFromTo(\"read\", false, true)\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && assertExactFields([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && assertMutableFields([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:56:18.542Z] May 23, 2021 5:56:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:56:18 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:56:18.661Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:123:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:292:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:292:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:292:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:292:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:335:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:335:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:57:37.053Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return resource.data[name] != request.resource.data[name]\n  }\n\n  function hasFieldChangedFromTo(name, from, to) {\n    return resource.data[name] == from && request.resource.data[name] == to\n  }\n\n  function updateNotifications(userID) {\n    // only allow \"read\" attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && hasFieldChangedFromTo(\"read\", false, true)\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n          && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && assertExactFields([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && assertMutableFields([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:57:37.062Z] May 23, 2021 5:57:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:57:37 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:57:37.150Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:123:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:292:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:292:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:292:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:292:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:335:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:335:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:57:38.339Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return resource.data[name] != request.resource.data[name]\n  }\n\n  function hasFieldChangedFromTo(name, from, to) {\n    return resource.data[name] == from && request.resource.data[name] == to\n  }\n\n  function updateNotifications(userID) {\n    // only allow \"read\" attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && hasFieldChangedFromTo(\"read\", false, true)\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && assertExactFields([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && assertMutableFields([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:57:38.371Z] May 23, 2021 5:57:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:57:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[info] i  firestore: Change detected, updating rules... 
[debug] [2021-05-23T21:57:38.436Z] >>> HTTP REQUEST PUT http://localhost:8080/emulator/v1/projects/studyfind-researcher:securityRules  
 {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = \"2\";\nservice cloud.firestore {\n  // AUTH\n  function isAuthenticated(uid) {\n    return request.auth.uid === uid\n  }\n\n  function isVerified() {\n    return request.auth.token.email_verified\n  }\n\n  function isParticipant() {\n    return request.auth.token.participant\n  }\n\n  function isResearcher() {\n    return request.auth.token.researcher\n  }\n\n  // DOCUMENT QUERIES\n\n  // fetch a study from firestore by studyID\n  function getStudyData(studyID) {\n    return get(/databases/$(database)/documents/studies/$(studyID)).data\n  }\n\n  function getStudyResearcherID(studyID) {\n    return getStudyData(studyID).researcher.id\n  }\n\n  // CONSTANTS\n  function validTimezoneList() {\n    return [\"America/Adak\", \"America/Anchorage\", \"America/Boise\", \"America/Chicago\", \"America/Denver\", \"America/Detroit\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/Los_Angeles\", \"America/Menominee\", \"America/Metlakatla\", \"America/New_York\", \"America/Nome\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Phoenix\", \"America/Sitka\", \"America/Yakutat\", \"Pacific/Honolulu\"]\n  }\n\n  function validStatusList() {\n    return [\"interested\", \"screened\", \"consented\", \"accepted\", \"rejected\"]\n  }\n\n  // UTILS\n  function isNonEmptyString(value) {\n    return value is string && value.size() > 0\n  }\n\n  function isNonEmptyList(value) {\n    return value is list && value.size() > 0\n  }\n\n  function isNonNegativeInt(value) {\n    return value is int && value >= 0\n  }\n\n  function isDateFormat(value) {\n    // meets YYYY-MM-DD format\n    return value is string && value.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-(0[1-9]|[12][0-9]|3[01])$/)\n  }\n\n  function isDivisibleByThirtyMinutes(value) {\n    // 1800000 = milliseconds in 30 minutes\n    return value % 1800000\n  }\n\n  function isWeeklyOffset(value) {\n    // 604800000 = milliseconds in one week\n    return value is int && 0 <= value <= 604800000\n  }\n\n  function isTimestampFormat(value) {\n    // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am\n    // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am\n    return value is int && 946684800000 <= value && value <= 32503680000000\n  }\n\n  function getUpdatedFields() {\n    return request.resource.data.diff(resource.data).affectedKeys()\n  }\n\n  function getCombinedFields() {\n    return request.resource.data.keys()\n  }\n\n  function assertRequiredFields(names) {\n    return getCombinedFields().hasAll(names)\n  }\n\n  function assertScopedFields(names) {\n    return getCombinedFields().hasOnly(names)\n  }\n\n  function assertExactFields(names) {\n    // request data should contain exactly the following fields\n    return assertRequiredFields(names) && assertScopedFields(names)\n  }\n\n  function assertMutableFields(names) {\n    return getUpdatedFields().hasOnly(names)\n  }\n\n  function assertImmutableFields(names) {\n    return !getUpdatedFields().hasAny(names)\n  }\n\n  function isLoneUpdatedField(name) {\n    return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])\n  }\n\n  function hasFieldChanged(name) {\n    return resource.data[name] != request.resource.data[name]\n  }\n\n  function hasFieldChangedFromTo(name, from, to) {\n    return resource.data[name] == from && request.resource.data[name] == to\n  }\n\n  function updateNotifications(userID) {\n    // only allow \"read\" attribute to be changed from false to true\n    return isAuthenticated(userID)\n      && isLoneUpdatedField(\"read\")\n      && hasFieldChangedFromTo(\"read\", false, true)\n  }\n\n\n  match /databases/{database}/documents {\n  \tmatch /researchers/{researcherID} {\n    \tallow read: if isAuthenticated(researcherID)\n\n      allow create: if isAuthenticated(researcherID)\n        && assertExactFields([\"name\", \"timezone\"])\n        && request.resource.data.name is string\n        && request.resource.data.name.size() > 0\n        && request.resource.data.name.size() < 50\n        && request.resource.data.timezone in validTimezoneList()\n\n      allow update: if isAuthenticated(researcherID)\n        && assertImmutableFields([\"name\"])\n        && assertMutableFields([\n          \"timezone\",\n          \"organization\",\n          \"background\",\n          \"preferences.autodetectTimezone\",\n          \"notifications.email\",\n          \"notifications.categories.account\",\n          \"notifications.categories.studies\",\n          \"notifications.categories.participants\",\n          \"notifications.categories.meetings\"\n        ])\n\n        && (!isLoneUpdatedField(\"timezone\") || hasFieldChanged(\"timezone\"))\n\n        // optional fields which may not exist in document so using `.get`\n        && request.resource.data.get(\"organization\", \"\") is string\n        && request.resource.data.get(\"background\", \"\") is string\n\n        && request.resource.data.get(\"preferences\", {}) is map\n        && request.resource.data.get(\"preferences.autodetectTimezone\", true) is bool\n\n        && request.resource.data.get(\"notifications\", {}) is map\n        && request.resource.data.get(\"notifications.email\", true) is bool\n        && request.resource.data.get(\"notifications.categories.account\", true) is bool\n        && request.resource.data.get(\"notifications.categories.studies\", true) is bool\n        && request.resource.data.get(\"notifications.categories.participants\", true) is bool\n        && request.resource.data.get(\"notifications.categories.meetings\", true) is bool\n\n      allow delete: if isAuthenticated(researcherID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(researcherID)\n        allow update: if updateNotifications(researcherID)\n      }\n    }\n\n    match /participants/{participantID} {\n    \tallow read, write: if isAuthenticated(participantID)\n\n      match /notifications/{notificationID} {\n      \tallow read: if isAuthenticated(participantID)\n        allow update: if updateNotifications(participantID)\n      }\n    }\n\n    match /studies/{studyID} {\n      allow read: if request.auth != null;\n      allow update: if isAuthenticated(resource.data.researcher.id)\n        && getUpdatedFields().hasOnly([\"published\", \"activated\", \"title\", \"description\", \"questions\"])\n\n        && request.resource.data.title is string\n        && request.resource.data.title.size() > 0\n        && request.resource.data.title.size() <= 100\n\n        && request.resource.data.description is string\n        && request.resource.data.description.size() >= 300\n        && request.resource.data.description.size() <= 500\n\n        && !\"published\" in getUpdatedFields() || (\n          && request.resource.data.published is bool\n          && request.resource.data.published == false\n          && request.resource.data.published == true\n        )\n\n        && !\"activated\" in getUpdatedFields() || (\n          && request.resource.data.activated is bool\n          && request.resource.data.published == true\n          && request.resource.data.activated != resource.data.activated\n        )\n\n        && request.resource.data.questions is list\n\n\n      allow delete: if request.auth.uid == resource.data.researcher.id\n\n      match /surveys/{surveyID} {\n        allow read, write;\n      }\n\n      match /participants/{participantID} {\n        allow read: if isAuthenticated(participantID) || isAuthenticated(getStudyResearcherID())\n\n        allow create: if isAuthenticated(participantID)\n          && exactFields([\"fakename\", \"timezone\", \"responses\", \"status\"])\n          && request.resource.data.fakename is string\n          && request.resource.data.fakename.size() == 8\n          && request.resource.data.timezone in validTimezoneList()\n          && request.resource.data.responses is list\n          && request.resource.data.status == \"interested\"\n\n        allow update: if isAuthenticated(getStudyResearcherID())\n          && isLoneUpdatedField(\"status\")\n          && request.resource.data.status in validStatusList()\n\n        allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n\n        match /notes/{noteID} {\n          allow read: if request.auth.uid == getStudyData(studyID).researcher.id\n          allow create: if request.auth.uid == getStudyData(studyID).researcher.id\n            && assertExactFields([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n\n          allow update: if getStudyData(studyID).researcher.id == request.auth.uid\n            && assertMutableFields([\"title\", \"body\"])\n            && request.resource.data.title is string\n            && request.resource.data.title.size() > 0\n            && request.resource.data.body is string\n            && request.resource.data.body.size() > 0\n\n          allow delete: if getStudyData(studyID).researcher.id == request.auth.uid\n        }\n\n        match /messages/{messageID} {\n          allow read: if getStudyData(studyID).researcher.id == request.auth.uid || participantID == request.auth.uid\n          allow create: if request.resource.data.user == request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && request.resource.data.user == request.auth.uid\n            && request.resource.data.text is string\n            && request.resource.data.text.size() > 0\n            && request.resource.data.time is int\n            && request.resource.data.read == false\n\n\n          allow update: if resource.data.user != request.auth.uid\n            && (\n              request.auth.uid == getStudyData(studyID).researcher.id\n              || request.auth.uid == participantID\n            )\n            && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"read\"])\n            && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"read\"])\n            && resource.data.read == false && request.resource.data.read == true\n        }\n    \t}\n    }\n\n    // match reminders\n    match /reminders/{reminderID} {\n    \tallow read: if request.auth.uid == resource.data.participantID\n        || request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.confirmedByParticipant == false\n\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /meetings/{meetingID} {\n    \tallow read: if request.auth.uid == resource.data.participantID || request.auth.uid == getStudyData(resource.data.studyID).researcher.id || request.auth.uid == resource.data.researcherID\n\n      allow update: if (\n        request.auth.uid == resource.data.participantID\n        && request.resource.data.diff(resource.data).affectedKeys().hasAll([\"confirmedByParticipant\"])\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"confirmedByParticipant\"])\n        && resource.resource.data == false\n        && request.resource.resource.data == true\n      ) || (\n        request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n        && request.resource.data.diff(resource.data).affectedKeys().hasOnly([\"name\", \"time\", \"link\", \"endDate\"])\n        && request.resource.data.times is list\n        && request.resource.data.times.size() > 0\n        && request.resource.data.times[0] is int\n        && request.resource.data.startDate is string\n        && request.resource.data.startDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n        && request.resource.data.endDate is string\n        && request.resource.data.endDate.matches(/^([2][0-9][0-9][0-9])\\-(0[1-9]|1[0-2])\\-([0-3][0-9])$/)\n      )\n\n      allow update: if (request.auth.uid == resource.data.participantID\n        && request.resource.data.keys().hasAll([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && request.resource.data.keys().hasOnly([\"title\", \"times\", \"startDate\", \"endDate\", \"confirmedByParticipant\"])\n        && resource.data.name == request.resource.data.name\n        && resource.data.link == request.resource.data.link\n        && resource.data.time == request.resource.data.time\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID\n        && request.resource.data.confirmedByParticipant == true)\n        || (request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n        && resource.data.participantID == request.resource.data.participantID\n        && resource.data.researcherID == request.resource.data.researcherID\n        && resource.data.studyID == request.resource.data.studyID)\n\n      allow create: if request.auth.uid == getStudyData(request.resource.data.studyID).researcher.id\n      allow delete: if request.auth.uid == getStudyData(resource.data.studyID).researcher.id\n    }\n\n    match /feedback/{feedbackID} {\n    \tallow create: if request.auth != null\n    }\n  }\n}\n"}]}}
[debug] [2021-05-23T21:57:38.442Z] May 23, 2021 5:57:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"May 23, 2021 5:57:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2021-05-23T21:57:38.466Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:123:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:292:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:292:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:292:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:292:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:335:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:335:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T21:57:38.551Z] <<< HTTP RESPONSE 200 {"content-type":"application/json","content-length":"9539"}
[warn] ⚠  firestore.rules:5:31 - ERROR Unexpected '='. 
[warn] ⚠  firestore.rules:55:46 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:55:47 - ERROR Unexpected '('. 
[warn] ⚠  firestore.rules:55:67 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:77 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:55:84 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:55:92 - ERROR mismatched input ']' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:55:94 - ERROR token recognition error at: '|[' 
[warn] ⚠  firestore.rules:55:95 - ERROR Unexpected '12'. 
[warn] ⚠  firestore.rules:55:104 - ERROR token recognition error at: '|3' 
[warn] ⚠  firestore.rules:55:111 - ERROR Forward slash '/' found where identifier or binding expected. 
[warn] ⚠  firestore.rules:55:111 - ERROR Missing 'match' keyword before path. 
[warn] ⚠  firestore.rules:55:112 - ERROR mismatched input ')' expecting {'&&', '.', '==', '>', '>=', '[', '<', '<=', '-', '%', '!=', '||', '+', '}', ';', '/', '*', '?', 'in', 'is'} 
[warn] ⚠  firestore.rules:123:3 - ERROR Unexpected 'match'. 
[warn] ⚠  firestore.rules:292:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:292:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:292:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:292:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:294:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:294:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:294:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:311:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:311:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:311:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:313:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:313:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:313:89 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:53 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:335:74 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:335:84 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:335:91 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:51 - ERROR token recognition error at: '^' 
[warn] ⚠  firestore.rules:337:72 - ERROR token recognition error at: '\' 
[warn] ⚠  firestore.rules:337:82 - ERROR token recognition error at: '|1' 
[warn] ⚠  firestore.rules:337:89 - ERROR token recognition error at: '\' 
[info] ✔  firestore: Rules updated. 
[debug] [2021-05-23T21:57:44.633Z] Received signal SIGHUP 1
[info]  
[info] i  emulators: Received SIGHUP for the first time. Starting a clean shutdown. 
[info] i  emulators: Please wait for a clean shutdown or send the SIGHUP signal again to stop right now. 
[debug] [2021-05-23T21:57:44.659Z] Error: write EIO
    at afterWriteDispatched (node:internal/stream_base_commons:160:15)
    at writeGeneric (node:internal/stream_base_commons:151:3)
    at WriteStream.Socket._writeGeneric (node:net:773:11)
    at WriteStream.Socket._write (node:net:785:8)
    at writeOrBuffer (node:internal/streams/writable:395:12)
    at WriteStream.Writable.write (node:internal/streams/writable:340:10)
    at Console.log (/usr/local/lib/node_modules/firebase-tools/node_modules/winston/lib/winston/transports/console.js:79:23)
    at Console._write (/usr/local/lib/node_modules/firebase-tools/node_modules/winston-transport/index.js:103:17)
    at doWrite (/usr/local/lib/node_modules/firebase-tools/node_modules/winston-transport/node_modules/readable-stream/lib/_stream_writable.js:428:64)
    at writeOrBuffer (/usr/local/lib/node_modules/firebase-tools/node_modules/winston-transport/node_modules/readable-stream/lib/_stream_writable.js:417:5)
    at Console.Writable.write (/usr/local/lib/node_modules/firebase-tools/node_modules/winston-transport/node_modules/readable-stream/lib/_stream_writable.js:334:11)
    at DerivedLogger.ondata (/usr/local/lib/node_modules/firebase-tools/node_modules/readable-stream/lib/_stream_readable.js:681:20)
    at DerivedLogger.emit (node:events:381:22)
    at DerivedLogger.emit (node:domain:470:12)
    at addChunk (/usr/local/lib/node_modules/firebase-tools/node_modules/readable-stream/lib/_stream_readable.js:298:12)
    at readableAddChunk (/usr/local/lib/node_modules/firebase-tools/node_modules/readable-stream/lib/_stream_readable.js:280:11)
[error] 
[error] Error: An unexpected error has occurred.
[info] i  emulators: Shutting down emulators. {"metadata":{"emulator":{"name":"hub"},"message":"Shutting down emulators."}}
[info] i  ui: Stopping Emulator UI {"metadata":{"emulator":{"name":"ui"},"message":"Stopping Emulator UI"}}
[debug] [2021-05-23T21:57:44.668Z] [worker-~diagnostic~-24617fe4-b52e-4dc4-811a-828189a5bf2a]: exited {"metadata":{"emulator":{"name":"functions"},"message":"[worker-~diagnostic~-24617fe4-b52e-4dc4-811a-828189a5bf2a]: exited"}}
[debug] [2021-05-23T21:57:44.668Z] [worker-~diagnostic~-24617fe4-b52e-4dc4-811a-828189a5bf2a]: FINISHED {"metadata":{"emulator":{"name":"functions"},"message":"[worker-~diagnostic~-24617fe4-b52e-4dc4-811a-828189a5bf2a]: FINISHED"}}
[warn] ⚠  Emulator UI has exited upon receiving signal: SIGINT 
[info] i  functions: Stopping Functions Emulator {"metadata":{"emulator":{"name":"functions"},"message":"Stopping Functions Emulator"}}
[info] i  hosting: Stopping Hosting Emulator {"metadata":{"emulator":{"name":"hosting"},"message":"Stopping Hosting Emulator"}}
[info] i  firestore: Stopping Firestore Emulator {"metadata":{"emulator":{"name":"firestore"},"message":"Stopping Firestore Emulator"}}
[debug] [2021-05-23T21:57:44.698Z] *** shutting down gRPC server since JVM is shutting down
 {"metadata":{"emulator":{"name":"firestore"},"message":"*** shutting down gRPC server since JVM is shutting down\n"}}
[debug] [2021-05-23T21:57:44.732Z] *** server shut down
 {"metadata":{"emulator":{"name":"firestore"},"message":"*** server shut down\n"}}
