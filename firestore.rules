rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {
    // AUTH DETAILS
    function isAuthenticated() {
      return request.auth != null
    }

    function isAuthenticatedAs(uid) {
      return request.auth.uid == uid
    }

    function isVerified() {
      return request.auth.token.email_verified
    }

    function isParticipant() {
      return request.auth.token.participant
    }

    function isResearcher() {
      return request.auth.token.researcher
    }

    // TYPE CHECKING
    function isBoolean(value) {
      return value is bool
    }

    function isFloat(value) {
      return value is float
    }

    function isInteger(value) {
      return value is int
    }

    function isNumber(value) {
      return value is number
    }

    function isString() {
      return value is string
    }

    function isList(value) {
      return value is list
    }

    function isMap(value) {
      return value is map
    }


    // UTIL FUNCTIONS
    function isTrue(value) {
      return value is bool && value == true
    }

    function isFalse(value) {
      return value is bool && value == false
    }

    function isEmail(value) {
      return value is string && value.matches(".*@.*\..{2,3}")
    }

    function isURL(value) {
      return value is string && value.matches("/^(ht|f)tp(s?):\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*((0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\+&=%\\$#_]*)?$/")
    }

    function isDate(value) {
      // meets YYYY-MM-DD format
      return value is string && value.matches("/^(19|20)[0-9][0-9][-\\/. ](0[1-9]|1[012])[-\\/. ](0[1-9]|[12][0-9]|3[01])$/")
    }

    function isTimestamp(value) {
      // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am
      // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am
      return value is int && 946684800000 <= value && value <= 32503680000000
    }

    function isAmericanTimezone() {
      return ["America/Adak", "America/Anchorage", "America/Boise", "America/Chicago", "America/Denver", "America/Detroit", "America/Indiana/Indianapolis", "America/Indiana/Knox", "America/Indiana/Marengo", "America/Indiana/Petersburg", "America/Indiana/Tell_City", "America/Indiana/Vevay", "America/Indiana/Vincennes", "America/Indiana/Winamac", "America/Juneau", "America/Kentucky/Louisville", "America/Kentucky/Monticello", "America/Los_Angeles", "America/Menominee", "America/Metlakatla", "America/New_York", "America/Nome", "America/North_Dakota/Beulah", "America/North_Dakota/Center", "America/North_Dakota/New_Salem", "America/Phoenix", "America/Sitka", "America/Yakutat", "Pacific/Honolulu"]
    }

    function isWeeklyOffset() {
      return value is int && 0 <= value < 604800000
    }

     function isBetweenMinMaxCharacterCount(value, min, max) {
      return value is string && min <= value.size() && value.size() <= max
    }

    function isBetweenMinMaxValue(value, min, max) {
      return value is number && min <= value.size() && value.size() <= max
    }

    function isUnchanged(fieldPath) {
      return request.resource.data.get(fieldPath) == resource.data.get(fieldPath)
    }

    function isChanged(fieldPath) {
      return request.resource.data.get(fieldPath) != resource.data.get(fieldPath)
    }

    function isInFuture(value) {
      return isTimestamp(value) && (request.time / 1000000) <= value
    }

    function isFirebaseUID(value) {
      return value is string && value.matches("[a-zA-Z0-9]{28}")
    }

    function isStudyNCTID(value) {
      return value is string && value.matches("NCT[0-9]{8}")
    }

    function isSet(fieldName) {
      return resource.data[fieldName] == false && request.resource.data[fieldName] == true
    }

    function isFakename(value) {
      return value is string && value.matches("[0-9A-Z]{10}")
    }

    // CONSTANTS
    function isSex(value) {
      return value in ["Male", "Female"]
    }

    function isSurveyQuestionType(value) {
      return value in ["short answer", "long answer", "multiple choice", "checkboxes", "dropdown", "number", "email", "phone", "file", "link", "date", "time"]
    }

    function isParticipantStatus(value) {
      return value in ["interested", "consented", "screened", "accepted", "rejected"]
    }

    // DOCUMENT QUERIES
    function getStudyData(studyID) {
      return get(/databases/$(database)/documents/studies/$(studyID)).data
    }

    function getStudyResearcherID(studyID) {
      return getStudyData(studyID).researcher.id
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    function readResearcher(researcherID) {
      return isAuthenticatedAs(researcherID)
    }

    function createResearcher(researcherID) {
      return isAuthenticatedAs(researcherID)
        && isBetweenMinMaxCharacterCount(request.resource.data.name, 1, 100)
        && isBetweenMinMaxCharacterCount(request.resource.data.organization, 0, 100)
        && isBetweenMinMaxCharacterCount(request.resource.data.background, 0, 500)
        && isAmericanTimezone(request.resource.data.timezone)

        && isMap(request.resource.data.preferences)

        && isMap(request.resource.data.preferences.timezone)
        && isBoolean(request.resource.data.preferences.timezone.autodetect)

        && isMap(request.resource.data.preferences.notifications)
        && isBoolean(request.resource.data.preferences.notifications.email)
        && isBoolean(request.resource.data.preferences.notifications.phone)
        && isBoolean(request.resource.data.preferences.notifications.toast)

        && isMap(request.resource.data.preferences.notifications.categories)
        && isBoolean(request.resource.data.preferences.notifications.categories.account)
        && isBoolean(request.resource.data.preferences.notifications.categories.studies)
        && isBoolean(request.resource.data.preferences.notifications.categories.participants)
        && isBoolean(request.resource.data.preferences.notifications.categories.meetings)
        && isBoolean(request.resource.data.preferences.notifications.categories.messages)
    }

    function updateResearcher(researcherID) {
      return isAuthenticatedAs(researcherID)
        && isUnchanged("name")
        && isBetweenMinMaxCharacterCount(request.resource.data.organization, 0, 100)
        && isBetweenMinMaxCharacterCount(request.resource.data.background, 0, 500)
        && isAmericanTimezone(request.resource.data.timezone)

        && isMap(request.resource.data.preferences)

        && isMap(request.resource.data.preferences.timezone)
        && isBoolean(request.resource.data.preferences.timezone.autodetect)

        && isMap(request.resource.data.preferences.notifications)
        && isBoolean(request.resource.data.preferences.notifications.email)
        && isBoolean(request.resource.data.preferences.notifications.phone)
        && isBoolean(request.resource.data.preferences.notifications.toast)

        && isMap(request.resource.data.preferences.notifications.categories)
        && isBoolean(request.resource.data.preferences.notifications.categories.account)
        && isBoolean(request.resource.data.preferences.notifications.categories.studies)
        && isBoolean(request.resource.data.preferences.notifications.categories.participants)
        && isBoolean(request.resource.data.preferences.notifications.categories.meetings)
        && isBoolean(request.resource.data.preferences.notifications.categories.messages)
    }

    function deleteResearcher(researcherID) {
      return isAuthenticatedAs(researcherID)
    }

    function readParticipant(participantID) {
      return isAuthenticatedAs(participantID)
    }

    function createParticipant(participantID) {
      return isAuthenticatedAs(participantID)
        && isBetweenMinMaxCharacterCount(request.resource.data.name, 1, 100)
        && isBetweenMinMaxCharacterCount(request.resource.data.availability, 0, 500)
        && isAmericanTimezone(request.resource.data.timezone)
        && isDate(request.resource.data.birthdate)
        && isSex(request.resource.data.sex)

        && isMap(request.resource.data.location)
        && isBetweenMinMaxValue(request.resource.data.location.latitude, -90, 90)
        && isBetweenMinMaxValue(request.resource.data.location.longitude, -180, 180)

        && isList(request.resource.data.enrolled)
        && isList(request.resource.data.saved)

        && isMap(request.resource.data.preferences)

        && isMap(request.resource.data.preferences.timezone)
        && isBoolean(request.resource.data.preferences.timezone.autodetect)

        && isMap(request.resource.data.preferences.location)
        && isBoolean(request.resource.data.preferences.location.autodetect)

        && isMap(request.resource.data.preferences.notifications)
        && isBoolean(request.resource.data.preferences.notifications.email)
        && isBoolean(request.resource.data.preferences.notifications.phone)
        && isBoolean(request.resource.data.preferences.notifications.toast)

        && isMap(request.resource.data.preferences.notifications.categories)
        && isBoolean(request.resource.data.preferences.notifications.categories.account)
        && isBoolean(request.resource.data.preferences.notifications.categories.status)
        && isBoolean(request.resource.data.preferences.notifications.categories.reminders)
        && isBoolean(request.resource.data.preferences.notifications.categories.meetings)
        && isBoolean(request.resource.data.preferences.notifications.categories.messages)
    }

    function updateParticipant(participantID) {
      return isAuthenticatedAs(participantID)
        && isUnchanged("name")
        && isBetweenMinMaxCharacterCount(request.resource.data.availability, 0, 500)
        && isAmericanTimezone(request.resource.data.timezone)
        && isDate(request.resource.data.birthdate)
        && isSex(request.resource.data.sex)

        && isMap(request.resource.data.location)
        && isBetweenMinMaxValue(request.resource.data.location.latitude, -90, 90)
        && isBetweenMinMaxValue(request.resource.data.location.longitude, -180, 180)

        && isList(request.resource.data.enrolled)
        && isList(request.resource.data.saved)

        && isMap(request.resource.data.preferences)

        && isMap(request.resource.data.preferences.timezone)
        && isBoolean(request.resource.data.preferences.timezone.autodetect)

        && isMap(request.resource.data.preferences.location)
        && isBoolean(request.resource.data.preferences.location.autodetect)

        && isMap(request.resource.data.preferences.notifications)
        && isBoolean(request.resource.data.preferences.notifications.email)
        && isBoolean(request.resource.data.preferences.notifications.phone)
        && isBoolean(request.resource.data.preferences.notifications.toast)

        && isMap(request.resource.data.preferences.notifications.categories)
        && isBoolean(request.resource.data.preferences.notifications.categories.account)
        && isBoolean(request.resource.data.preferences.notifications.categories.status)
        && isBoolean(request.resource.data.preferences.notifications.categories.reminders)
        && isBoolean(request.resource.data.preferences.notifications.categories.meetings)
        && isBoolean(request.resource.data.preferences.notifications.categories.messages)
    }

    function deleteParticipant(participantID) {
      return isAuthenticatedAs(participantID)
    }

    function readNotification(userID) {
      return isAuthenticatedAs(userID)
    }

    function createNotification(userID) {
      return false // notification is created by cloud function on trigger
    }

    function updateNotification(userID) {
      return isAuthenticatedAs(userID)
        && isUnchanged("code")
        && isUnchanged("meta")
        && isUnchanged("time")
        && isSet("read")
    }

    function deleteNotification(userID) {
      return false // notifications can never be deleted
    }

    function readStudy(studyID) {
      return isResearcher()
        ? isAuthenticatedAs(resource.data.researcher.id)
        : isAuthenticated()
    }

    function createStudy(studyID) {
      return false // study is created by cloud function
    }

    function updateStudy(studyID) {
      return isAuthenticatedAs(resource.data.researcher.id)
        && isUnchanged("createdAt")
        && isUnchanged("updatedAt")
        && isUnchanged("published") || isSet("published")
        && isUnchanged("activated") || isTrue(request.resource.data.published)
        && isUnchanged("control")
        && isUnchanged("type")
        && isUnchanged("age")
        && isUnchanged("sex")
        && isUnchanged("locations")
        && isUnchanged("conditions")
        && isUnchanged("researcher")
        && isBetweenMinMaxCharacterCount(request.resource.data.title, 50, 100)
        && isBetweenMinMaxCharacterCount(request.resource.data.description, 300, 500)
        && isList(request.resource.data.questions)
    }

    function deleteStudy(studyID) {
      return isAuthenticatedAs(resource.data.researcher.id)
    }

    function readStudySurvey(studyID) {
      return isResearcher()
        ? isAuthenticatedAs(getStudyResearcherID(studyID))
        : isAuthenticated()
    }

    function createStudySurvey(studyID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID))
        && isBetweenMinMaxCharacterCount(request.resource.data.title, 1, 100)
        && isList(request.resource.data.questions)
        && isSurveyQuestionType(request.resource.data.questions[0].type)
        && isBetweenMinMaxCharacterCount(request.resource.data.questions[0].prompt, 1, 500)
        && isMap(request.resource.data.questions[0].constraints)
        && isBoolean(request.resource.data.questions[0].required)
    }

    function updateStudySurvey() {
      return isAuthenticatedAs(getStudyResearcherID(studyID))
        && isBetweenMinMaxCharacterCount(request.resource.data.title, 1, 100)
        && isList(request.resource.data.questions)
        && isSurveyQuestionType(request.resource.data.questions[0].type)
        && isBetweenMinMaxCharacterCount(request.resource.data.questions[0].prompt, 1, 500)
        && isMap(request.resource.data.questions[0].constraints)
        && isBoolean(request.resource.data.questions[0].required)
    }

    function deleteStudySurvey() {
      return isAuthenticatedAs(getStudyResearcherID(studyID))
    }

    function readStudyParticipant(studyID, participantID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID)) || isAuthenticatedAs(participantID)
    }

    function createStudyParticipant(participantID) {
      return isAuthenticatedAs(participantID)
        && isFakename(request.resource.data.fakename)
        && isAmericanTimezone(request.resource.data.timezone)
        && isList(request.resource.data.responses)
        && request.resource.data.status == "interested"
    }

    function updateStudyParticipant(studyID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID))
        && isUnchanged("fakename")
        && isUnchanged("timezone")
        && isUnchanged("responses")
        && isParticipantStatus(request.resource.data.status)
    }

    function deleteStudyParticipant(studyID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID))
    }

    function readStudyParticipantNote(studyID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID))
    }

    function createStudyParticipantNote(studyID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID))
        && isInFuture(request.resource.data.time)
        && isBetweenMinMaxCharacterCount(request.resource.data.title, 1, 100)
        && isBetweenMinMaxCharacterCount(request.resource.data.body, 1, 300)
    }

    function updateStudyParticipantNote(studyID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID))
        && isUnchanged("time")
        && isBetweenMinMaxCharacterCount(request.resource.data.title, 1, 100)
        && isBetweenMinMaxCharacterCount(request.resource.data.body, 1, 300)
    }

    function deleteStudyParticipantNote(studyID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID))
    }

    function readStudyParticipantMessage(studyID, participantID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID)) || isAuthenticatedAs(participantID)
    }

    function createStudyParticipantMessage(studyID, participantID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID)) || isAuthenticatedAs(participantID)
        && isAuthenticatedAs(request.resource.data.user)
        && isInFuture(request.resource.data.time)
        && isString(request.resource.data.text)
        && isBoolean(request.resource.data.read)
    }

    function updateStudyParticipantMessage(studyID, participantID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID)) || isAuthenticatedAs(participantID)
        && !isAuthenticatedAs(resource.data.user)
        && isUnchanged("user")
        && isUnchanged("time")
        && isUnchanged("text")
        && isSet(request.resource.data.read)
    }

    function deleteStudyParticipantMessage(studyID, participantID) {
      return false
    }

    function readReminder() {
      return isAuthenticatedAs(request.resource.data.researcherID) || isAuthenticatedAs(request.resource.data.participantID)
    }

    function createReminder() {
      return isAuthenticatedAs(request.resource.data.researcherID)
        && isAuthenticatedAs(getStudyResearcherID(request.resource.data.studyID))
        && exists(/databases/$(database)/documents/studies/$(request.resource.data.studyID)/participants/$(request.resource.data.participantID))
        && isBetweenMinMaxCharacterCount(request.resource.data.title, 1, 100)
        && isList(request.resource.data.times)
        && isWeeklyOffset(request.resource.data.times[0])
        && isDate(request.resource.data.startDate)
        && isDate(request.resource.data.endDate)
        && request.resource.data.startDate < request.resource.data.endDate
        && isFalse(request.resource.data.confirmedByParticipant)
    }

    function updateReminder() {
      return (
        isAuthenticatedAs(resource.data.researcherID)
        && isUnchanged("researcherID")
        && isUnchanged("participantID")
        && isUnchanged("studyID")
        && isUnchanged("confirmedByParticipant")
        && isBetweenMinMaxCharacterCount(request.resource.data.title, 1, 100)
        && isList(request.resource.data.times)
        && isWeeklyOffset(request.resource.data.times[0])
        && isDate(request.resource.data.startDate)
        && isDate(request.resource.data.endDate)
      ) || (
        isAuthenticatedAs(resource.data.participantID)
        && isUnchanged("researcherID")
        && isUnchanged("participantID")
        && isUnchanged("studyID")
        && isUnchanged("title")
        && isUnchanged("times")
        && isUnchanged("startDate")
        && isUnchanged("endDate")
        && isSet(request.resource.data.confirmedByParticipant)
      )
    }

    function deleteReminder() {
      return isAuthenticatedAs(resource.data.researcherID)
    }

    function readMeeting() {
      return isAuthenticatedAs(request.resource.data.researcherID) || isAuthenticatedAs(request.resource.data.participantID)
    }

    function createMeeting() {
      return isAuthenticatedAs(request.resource.data.researcherID)
        && isAuthenticatedAs(getStudyResearcherID(request.resource.data.studyID))
        && exists(/databases/$(database)/documents/studies/$(request.resource.data.studyID)/participants/$(request.resource.data.participantID))
        && isBetweenMinMaxCharacterCount(request.resource.data.name, 1, 100)
        && isInFuture(request.resource.data.time)
        && isURL(request.resource.data.link)
        && isFalse(request.resource.data.confirmedByParticipant)
    }

    function updateMeeting() {
      return (
        isAuthenticatedAs(resource.data.researcherID)
        && isUnchanged("researcherID")
        && isUnchanged("participantID")
        && isUnchanged("studyID")
        && isUnchanged("confirmedByParticipant")
        && isBetweenMinMaxCharacterCount(request.resource.data.name, 1, 100)
        && isInFuture(request.resource.data.time)
        && isURL(request.resource.data.link)
      ) || (
        isAuthenticatedAs(resource.data.participantID)
        && isUnchanged("researcherID")
        && isUnchanged("participantID")
        && isUnchanged("studyID")
        && isUnchanged("name")
        && isUnchanged("time")
        && isUnchanged("link")
        && isSet(request.resource.data.confirmedByParticipant)
      )
    }

    function deleteMeeting() {
      return isAuthenticatedAs(resource.data.researcherID)
    }

    function readFeedback() {
      return false
    }

    function createFeedback() {
      return isAuthenticated()
        && isBetweenMinMaxCharacterCount(request.resource.data.title, 1, 100)
        && isBetweenMinMaxCharacterCount(request.resource.data.body, 1, 500)
        && isTimestamp(request.resource.data.time)
        && isEmail(request.resource.data.email)
        && isSide(request.resource.data.side)
    }

    function updateFeedback() {
      return false
    }

    function deleteFeedback() {
      return false
    }

  	match /researchers/{researcherID} {
    	allow read: if readResearcher(researcherID)
      allow create: if createResearcher(researcherID)
      allow update: if updateResearcher(researcherID)
      allow delete: if deleteResearcher(researcherID)

      match /notifications/{notificationID} {
      	allow read: if readNotification(researcherID)
        allow create: if createNotification(researcherID)
        allow update: if updateNotification(researcherID)
        allow delete: if deleteNotification(researcherID)
      }
    }

    match /participants/{participantID} {
    	allow read: if readParticipant(participantID)
      allow create: if createParticipant(participantID)
      allow update: if updateParticipant(participantID)
      allow delete: if deleteParticipant(participantID)

      match /notifications/{notificationID} {
      	allow read: if readNotification(participantID)
        allow create: if createNotification(participantID)
        allow update: if updateNotification(participantID)
        allow delete: if deleteNotification(participantID)
      }
    }

    match /studies/{studyID} {
      allow read: if readStudy(studyID)
      allow create: if createStudy(studyID)
      allow update: if updateStudy(studyID)
      allow delete: if deleteStudy(studyID)

      match /surveys/{surveyID} {
        allow read: if readStudySurvey(studyID);
        allow create: if createStudySurvey(studyID);
        allow update: if updateStudySurvey(studyID);
        allow delete: if deleteStudySurvey(studyID);
      }

      match /participants/{participantID} {
        allow read: if readStudyParticipant(studyID, participantID);
        allow create: if createStudyParticipant(participantID);
        allow update: if updateStudyParticipant(studyID);
        allow delete: if deleteStudyParticipant(studyID);

        match /notes/{noteID} {
          allow read: if readStudyParticipantNote(studyID)
          allow create: if createStudyParticipantNote(studyID)
          allow update: if updateStudyParticipantNote(studyID)
          allow delete: if deleteStudyParticipantNote(studyID)
        }

        match /messages/{messageID} {
          allow read: if readStudyParticipantMessage(studyID, participantID);
          allow create: if createStudyParticipantMessage(studyID, participantID);
          allow update: if updateStudyParticipantMessage(studyID, participantID);
          allow delete: if deleteStudyParticipantMessage(studyID, participantID);
        }
    	}
    }

    match /reminders/{reminderID} {
    	allow read: if readReminder();
    	allow create: if createReminder();
    	allow update: if updateReminder();
    	allow delete: if deleteReminder();
    }

    match /meetings/{meetingID} {
    	allow read: if readMeeting();
    	allow create: if createMeeting();
    	allow update: if updateMeeting();
    	allow delete: if deleteMeeting();
    }

    match /feedback/{feedbackID} {
      allow read: if readFeedback();
    	allow create: if createFeedback();
    	allow update: if updateFeedback();
    	allow delete: if deleteFeedback();
    }
  }
}
