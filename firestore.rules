rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {
    // AUTH
    function isAuthenticated() {
      return request.auth != null
    }

    function isAuthenticatedAs(uid) {
      return request.auth.uid == uid
    }

    function isVerified() {
      return request.auth.token.email_verified
    }

    function isParticipant() {
      return request.auth.token.participant
    }

    function isResearcher() {
      return request.auth.token.researcher
    }

    // DOCUMENT QUERIES
    function getStudyData(studyID) {
      return get(/databases/$(database)/documents/studies/$(studyID)).data
    }

    function getStudyResearcherID(studyID) {
      return getStudyData(studyID).researcher.id
    }

    function checkStudyParticipantExists(studyID, participantID) {
      return exists(/databases/$(database)/documents/studies/$(studyID)/participants/$(participantID))
    }

    function ensureResearcherOwnsStudy(studyID, researcherID) {
      return getStudyResearcherID(studyID) == researcherID
    }

    // CONSTANTS
    function validTimezoneList() {
      return ["America/Adak", "America/Anchorage", "America/Boise", "America/Chicago", "America/Denver", "America/Detroit", "America/Indiana/Indianapolis", "America/Indiana/Knox", "America/Indiana/Marengo", "America/Indiana/Petersburg", "America/Indiana/Tell_City", "America/Indiana/Vevay", "America/Indiana/Vincennes", "America/Indiana/Winamac", "America/Juneau", "America/Kentucky/Louisville", "America/Kentucky/Monticello", "America/Los_Angeles", "America/Menominee", "America/Metlakatla", "America/New_York", "America/Nome", "America/North_Dakota/Beulah", "America/North_Dakota/Center", "America/North_Dakota/New_Salem", "America/Phoenix", "America/Sitka", "America/Yakutat", "Pacific/Honolulu"]
    }

    function validStatusList() {
      return ["interested", "screened", "consented", "accepted", "rejected"]
    }

    // UTILS
    function isNonEmptyString(value) {
      return value is string && value.size() > 0
    }

    function isNonEmptyList(value) {
      return value is list && value.size() > 0
    }

    function isNonNegativeInt(value) {
      return value is int && value >= 0
    }

    function isDateFormat(value) {
      // meets YYYY-MM-DD format
      return value is string && value.matches("/^(19|20)[0-9][0-9][-\\/. ](0[1-9]|1[012])[-\\/. ](0[1-9]|[12][0-9]|3[01])$/")
    }

    function isURLFormat(value) {
      return value is string && value.matches("/^(ht|f)tp(s?):\\/\\/[0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*((0-9)*)*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\'\\/\\\\+&=%\\$#_]*)?$/")
    }

    function isDivisibleByThirtyMinutes(value) {
      // 1800000 = milliseconds in 30 minutes
      return value % 1800000
    }

    function isWeeklyOffset(value) {
      // 604800000 = milliseconds in one week
      return value is int && 0 <= value && value <= 604800000
    }

    function isTimestampFormat(value) {
      // 946684800000 = unix (millis) timestamp value of 2000-01-01 at 12:00:00am
      // 32503680000000 = unix (millis) timestamp value of 3000-01-01 at 12:00:00am
      return value is int && 946684800000 <= value && value <= 32503680000000
    }

    function getUpdatedFields() {
      return request.resource.data.diff(resource.data).affectedKeys()
    }

    function getCombinedFields() {
      return request.resource.data.keys()
    }

    function assertRequiredFields(names) {
      return getCombinedFields().hasAll(names)
    }

    function assertScopedFields(names) {
      return getCombinedFields().hasOnly(names)
    }

    function assertExactFields(names) {
      // request data should contain exactly the following fields
      return assertRequiredFields(names) && assertScopedFields(names)
    }

    function assertMutableFields(names) {
      return getUpdatedFields().hasOnly(names)
    }

    function assertImmutableFields(names) {
      return !getUpdatedFields().hasAny(names)
    }

    function isLoneUpdatedField(name) {
      return getUpdatedFields().hasOnly([name]) && getUpdatedFields().hasAll([name])
    }

    function isFieldChanging(name) {
      return resource.data[name] != request.resource.data[name]
    }

    function isFieldChangingFromTo(name, from, to) {
      return resource.data[name] == from && request.resource.data[name] == to
    }


    function researcherRead(researcherID) {
      return isAuthenticatedAs(researcherID)
    }

    function researcherCreate(researcherID) {
      return isAuthenticatedAs(researcherID)
        && assertExactFields(["name", "timezone"])
        && request.resource.data.name is string
        && request.resource.data.name.size() > 0
        && request.resource.data.name.size() < 50
        && request.resource.data.timezone in validTimezoneList()
    }

    function researcherUpdate(researcherID) {
      return isAuthenticatedAs(researcherID)
        && assertImmutableFields(["name"])
        && assertMutableFields([
          "timezone",
          "organization",
          "background",
          "preferences.autodetectTimezone",
          "notifications.email",
          "notifications.categories.account",
          "notifications.categories.studies",
          "notifications.categories.participants",
          "notifications.categories.meetings"
        ])

        // required fields will exist in document so no access failure
        && request.resource.data.timezone in validTimezoneList()

        // optional fields may not exist in document so using `.get`
        && request.resource.data.get("organization", "") is string
        && request.resource.data.get("background", "") is string
        && request.resource.data.get("preferences", {}) is map
        && request.resource.data.get("preferences.autodetectTimezone", true) is bool
        && request.resource.data.get("notifications", {}) is map
        && request.resource.data.get("notifications.email", true) is bool
        && request.resource.data.get("notifications.categories.account", true) is bool
        && request.resource.data.get("notifications.categories.studies", true) is bool
        && request.resource.data.get("notifications.categories.participants", true) is bool
        && request.resource.data.get("notifications.categories.meetings", true) is bool
    }

    function researcherDelete(researcherID) {
      return isAuthenticatedAs(researcherID)
    }

    function participantRead(participantID) {
      return isAuthenticatedAs(participantID)
    }

    function participantCreate(participantID) {
      return isAuthenticatedAs(participantID)
    }

    function participantUpdate(participantID) {
      return isAuthenticatedAs(participantID)
    }

    function participantDelete(participantID) {
      return isAuthenticatedAs(participantID)
    }

    function notificationRead(userID) {
      return isAuthenticatedAs(userID)
    }

    function notificationUpdate(userID) {
      // only allow "read" attribute to be changed from false to true
      return isAuthenticatedAs(userID) && isFieldChangingFromTo("read", false, true)
    }

    function studyRead() {
      return isAuthenticated();
    }

    function studyUpdate(researcherID) {
      return isAuthenticatedAs(researcherID)
        && assertMutableFields(["published", "activated", "title", "description", "questions"])

        && !("published" in getUpdatedFields()) || (
          request.resource.data.published is bool
          && isFieldChangingFromTo("published", false, true)
        )

        && !("activated" in getUpdatedFields()) || (
          request.resource.data.activated is bool
          && request.resource.data.published == true
          && request.resource.data.activated != resource.data.activated
        )

        && request.resource.data.title is string
        && request.resource.data.title.size() >= 50
        && request.resource.data.title.size() <= 100

        && request.resource.data.description is string
        && request.resource.data.description.size() >= 300
        && request.resource.data.description.size() <= 500

        && request.resource.data.questions is list
    }

    function studyDelete(researcherID) {
      return isAuthenticatedAs(researcherID)
    }

    function studySurveyRead() {
      return true;
    }

    function studySurveyCreate() {
      return true;
    }

    function studySurveyUpdate() {
      return true;
    }

    function studySurveyDelete() {
      return true;
    }

    function studyParticipantRead(participantID, studyID) {
      return isAuthenticatedAs(participantID) || isAuthenticatedAs(getStudyResearcherID(studyID))
    }

    function studyParticipantCreate(participantID) {
      // only participants can add themselves to a study
      return isAuthenticatedAs(participantID)
        && assertExactFields(["fakename", "timezone", "responses", "status"])
        && request.resource.data.fakename is string
        && request.resource.data.fakename.size() == 8
        && request.resource.data.timezone in validTimezoneList()
        && request.resource.data.responses is list
        && request.resource.data.status == validStatusList()[0]
    }

    function studyParticipantUpdate(studyID) {
      // only researchers can update study participants
      return isAuthenticatedAs(getStudyResearcherID(studyID))
        && assertMutableFields(["status"])
        && request.resource.data.status in validStatusList()
    }

    function studyParticipantDelete(participantID, studyID) {
      // either the researcher or the participant can delete the study participant data
      return isAuthenticatedAs(participantID) || isAuthenticatedAs(getStudyResearcherID(studyID))
    }

    function studyParticipantNoteRead(studyID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID))
    }

    function studyParticipantNoteCreate(studyID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID))
        && assertExactFields(["title", "body"])
        && isNonEmptyString(request.resource.data.title)
        && isNonEmptyString(request.resource.data.body)
    }

    function studyParticipantNoteUpdate(studyID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID))
        && assertMutableFields(["title", "body"])
        && isNonEmptyString(request.resource.data.title)
        && isNonEmptyString(request.resource.data.body)
    }

    function studyParticipantNoteDelete(studyID) {
      return isAuthenticatedAs(getStudyResearcherID(studyID))
    }

    function studyParticipantMessageRead(participantID, studyID) {
      return isAuthenticatedAs(participantID) || isAuthenticatedAs(getStudyResearcherID(studyID))
    }

    function studyParticipantMessageCreate(participantID, studyID) {
      return isAuthenticatedAs(participantID) || isAuthenticatedAs(getStudyResearcherID(studyID))
        && assertExactFields(["text", "time", "user", "read"])
        && isNonEmptyString(request.resource.data.text)
        && isTimestampFormat(request.resource.data.time)
        && request.resource.data.user == request.auth.uid
        && request.resource.data.read == false
    }

    function studyParticipantMessageUpdate(participantID, studyID) {
      // only other user can update a user's message "read" status from false to true
      return isAuthenticatedAs(participantID) || isAuthenticatedAs(getStudyResearcherID(studyID))
        && resource.data.user != request.auth.uid
        && assertMutableFields(["read"])
        && isFieldChangingFromTo("read", false, true)
    }

    function reminderRead() {
      return isAuthenticatedAs(resource.data.participantID) || isAuthenticatedAs(resource.data.researcherID)
    }

    function reminderCreate() {
      return isAuthenticatedAs(request.resource.data.researcherID)
        && assertExactFields(["title", "times", "startDate", "endDate", "confirmedByParticipant", "researcherID", "participantID", "studyID"])
        && isNonEmptyList(request.resource.data.times)
        && isWeeklyOffset(request.resource.data.times[0])
        && isDivisibleByThirtyMinutes(request.resource.data.times[0])
        && isDateFormat(request.resource.data.startDate)
        && isDateFormat(request.resource.data.endDate)
        && request.resource.data.confirmedByParticipant == false
        && ensureResearcherOwnsStudy(request.resource.data.studyID, request.resource.data.researcherID)
        && checkStudyParticipantExists(request.resource.data.studyID, request.resource.data.participantID)
    }

    function reminderUpdate() {
      return (
        isAuthenticatedAs(resource.data.participantID)
        && assertMutableFields(["confirmedByParticipant"])
        && isFieldChangingFromTo("confirmedByParticipant", false, true)
      ) || (
        isAuthenticatedAs(resource.data.researcherID)
        && assertMutableFields(["title", "times", "startDate", "endDate"])
        && isNonEmptyList(request.resource.data.times)
        && isWeeklyOffset(request.resource.data.times[0])
        && isDivisibleByThirtyMinutes(request.resource.data.times[0])
        && isDateFormat(request.resource.data.startDate)
        && isDateFormat(request.resource.data.endDate)
      )
    }

    function reminderDelete() {
      return isAuthenticatedAs(resource.data.researcherID)
    }

    function meetingRead() {
      return isAuthenticatedAs(resource.data.participantID) || isAuthenticatedAs(resource.data.researcherID)
    }

    function meetingCreate() {
      return isAuthenticatedAs(request.resource.data.researcherID)
        && assertExactFields(["name", "time", "link", "researcherID", "participantID", "studyID"])
        && isNonEmptyString(request.resource.data.name)
        && isTimestampFormat(request.resource.data.time)
        && isURLFormat(request.resource.data.link)
        && request.resource.data.confirmedByParticipant == false
        && ensureResearcherOwnsStudy(request.resource.data.studyID, request.resource.data.researcherID)
        && checkStudyParticipantExists(request.resource.data.studyID, request.resource.data.participantID)
    }

    function meetingUpdate() {
      return (
        isAuthenticatedAs(resource.data.participantID)
        && assertMutableFields(["confirmedByParticipant"])
        && isFieldChangingFromTo("confirmedByParticipant", false, true)
      ) || (
        isAuthenticatedAs(resource.data.researcherID)
        && assertMutableFields(["name", "time", "link"])
        && isNonEmptyString(request.resource.data.name)
        && isTimestampFormat(request.resource.data.time)
        && isURLFormat(request.resource.data.link)
      )
    }

    function meetingDelete() {
      return isAuthenticatedAs(resource.data.researcherID)
    }

    function feedbackCreate() {
      return isAuthenticated();
    }

  	match /researchers/{researcherID} {
    	allow read: if researcherRead(researcherID)
    	allow create: if researcherCreate(researcherID)
    	allow update: if researcherUpdate(researcherID)
    	allow delete: if researcherDelete(researcherID)

      match /notifications/{notificationID} {
      	allow read: if notificationRead(researcherID);
        allow update: if notificationUpdate(researcherID);
      }
    }

    match /participants/{participantID} {
    	allow read: if participantRead(participantID);
    	allow create: if participantCreate(participantID);
    	allow update: if participantUpdate(participantID);
    	allow delete: if participantDelete(participantID);

      match /notifications/{notificationID} {
      	allow read: if notificationRead(participantID);
        allow update: if notificationUpdate(participantID);
      }
    }

    match /studies/{studyID} {
      allow read: if studyRead();
      allow update: if studyUpdate(resource.data.researcher.id);
      allow delete: if studyDelete(resource.data.researcher.id);

      match /surveys/{surveyID} {
        allow read: if studySurveyRead();
        allow create: if studySurveyCreate();
        allow update: if studySurveyUpdate();
        allow delete: if studySurveyDelete();
      }

      match /participants/{participantID} {
        allow read: if studyParticipantRead(participantID, studyID);
        allow create: if studyParticipantCreate(participantID);
        allow update: if studyParticipantUpdate(studyID);
        allow delete: if studyParticipantDelete(participantID, studyID);

        match /notes/{noteID} {
          allow read: if studyParticipantNoteRead(studyID)
          allow create: if studyParticipantNoteCreate(studyID)
          allow update: if studyParticipantNoteUpdate(studyID)
          allow delete: if studyParticipantNoteDelete(studyID)
        }

        match /messages/{messageID} {
          allow read: if studyParticipantMessageRead(participantID, studyID);
          allow create: if studyParticipantMessageCreate(participantID, studyID);
          allow update: if studyParticipantMessageUpdate(participantID, studyID);
        }
    	}
    }

    // match reminders
    match /reminders/{reminderID} {
    	allow read: if reminderRead();
    	allow create: if reminderCreate();
    	allow update: if reminderUpdate();
    	allow delete: if reminderDelete();
    }

    match /meetings/{meetingID} {
    	allow read: if meetingRead();
    	allow create: if meetingCreate();
    	allow update: if meetingUpdate();
    	allow delete: if meetingDelete();
    }

    match /feedback/{feedbackID} {
    	allow create: if feedbackCreate();
    }
  }
}
